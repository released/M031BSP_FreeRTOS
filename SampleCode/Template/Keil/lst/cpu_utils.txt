; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\cpu_utils.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\cpu_utils.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\..\..\Library\CMSIS\Include -I..\..\..\Library\Device\Nuvoton\M031\Include -I..\..\..\Library\StdDriver\inc -I..\..\..\ThirdParty\FreeRTOS\Source\include -I..\..\..\ThirdParty\FreeRTOS\Demo\Common\include -I..\..\..\ThirdParty\FreeRTOS\Source\portable\RVDS\ARM_CM0 -I..\..\..\ThirdParty\FreeRTOS -I..\..\Template -I..\CPU -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=526 --omf_browse=.\obj\cpu_utils.crf ..\CPU\cpu_utils.c]
                          THUMB

                          AREA ||i.EndIdleMonitor||, CODE, READONLY, ALIGN=2

                  EndIdleMonitor PROC
;;;122      */
;;;123    void EndIdleMonitor (void)
000000  b510              PUSH     {r4,lr}
;;;124    {
;;;125      if( xTaskGetCurrentTaskHandle() == xIdleHandle )
000002  f7fffffe          BL       xTaskGetCurrentTaskHandle
000006  4c06              LDR      r4,|L1.32|
000008  6821              LDR      r1,[r4,#0]  ; xIdleHandle
00000a  4288              CMP      r0,r1
00000c  d107              BNE      |L1.30|
;;;126      {
;;;127        /* Store the handle to the idle task. */
;;;128        osCPU_IdleSpentTime = xTaskGetTickCountFromISR() - osCPU_IdleStartTime;
00000e  f7fffffe          BL       xTaskGetTickCountFromISR
000012  68a1              LDR      r1,[r4,#8]  ; osCPU_IdleStartTime
000014  1a40              SUBS     r0,r0,r1
;;;129        osCPU_TotalIdleTime += osCPU_IdleSpentTime; 
000016  60e0              STR      r0,[r4,#0xc]  ; osCPU_IdleSpentTime
000018  6921              LDR      r1,[r4,#0x10]  ; osCPU_TotalIdleTime
00001a  1808              ADDS     r0,r1,r0
00001c  6120              STR      r0,[r4,#0x10]  ; osCPU_TotalIdleTime
                  |L1.30|
;;;130      }
;;;131    }
00001e  bd10              POP      {r4,pc}
;;;132    
                          ENDP

                  |L1.32|
                          DCD      ||.data||

                          AREA ||i.StartIdleMonitor||, CODE, READONLY, ALIGN=2

                  StartIdleMonitor PROC
;;;109      */
;;;110    void StartIdleMonitor (void)
000000  b510              PUSH     {r4,lr}
;;;111    {
;;;112      if( xTaskGetCurrentTaskHandle() == xIdleHandle ) 
000002  f7fffffe          BL       xTaskGetCurrentTaskHandle
000006  4c04              LDR      r4,|L2.24|
000008  6821              LDR      r1,[r4,#0]  ; xIdleHandle
00000a  4288              CMP      r0,r1
00000c  d102              BNE      |L2.20|
;;;113      {
;;;114        osCPU_IdleStartTime = xTaskGetTickCountFromISR();
00000e  f7fffffe          BL       xTaskGetTickCountFromISR
000012  60a0              STR      r0,[r4,#8]  ; osCPU_IdleStartTime
                  |L2.20|
;;;115      }
;;;116    }
000014  bd10              POP      {r4,pc}
;;;117    
                          ENDP

000016  0000              DCW      0x0000
                  |L2.24|
                          DCD      ||.data||

                          AREA ||i.osGetCPUUsage||, CODE, READONLY, ALIGN=2

                  osGetCPUUsage PROC
;;;137      */
;;;138    uint16_t osGetCPUUsage (void)
000000  4801              LDR      r0,|L3.8|
;;;139    {
;;;140      return (uint16_t)osCPU_Usage;
000002  6840              LDR      r0,[r0,#4]  ; osCPU_Usage
000004  b280              UXTH     r0,r0
;;;141    }
000006  4770              BX       lr
;;;142    
                          ENDP

                  |L3.8|
                          DCD      ||.data||

                          AREA ||i.vApplicationIdleHook||, CODE, READONLY, ALIGN=2

                  vApplicationIdleHook PROC
;;;73       */
;;;74     void vApplicationIdleHook(void) 
000000  b510              PUSH     {r4,lr}
;;;75     {
;;;76       if( xIdleHandle == NULL )
000002  4c04              LDR      r4,|L4.20|
000004  6820              LDR      r0,[r4,#0]  ; xIdleHandle
000006  2800              CMP      r0,#0
000008  d102              BNE      |L4.16|
;;;77       {
;;;78         /* Store the handle to the idle task. */
;;;79         xIdleHandle = xTaskGetCurrentTaskHandle();
00000a  f7fffffe          BL       xTaskGetCurrentTaskHandle
00000e  6020              STR      r0,[r4,#0]  ; xIdleHandle
                  |L4.16|
;;;80       }
;;;81     }
000010  bd10              POP      {r4,pc}
;;;82     
                          ENDP

000012  0000              DCW      0x0000
                  |L4.20|
                          DCD      ||.data||

                          AREA ||i.vApplicationTickHook||, CODE, READONLY, ALIGN=2

                  vApplicationTickHook PROC
;;;87       */
;;;88     void vApplicationTickHook (void)
000000  b570              PUSH     {r4-r6,lr}
;;;89     {
;;;90       static int tick = 0;
;;;91       
;;;92       if(tick ++ > CALCULATION_PERIOD)
000002  4c0c              LDR      r4,|L5.52|
000004  6960              LDR      r0,[r4,#0x14]  ; tick
000006  1c41              ADDS     r1,r0,#1
000008  6161              STR      r1,[r4,#0x14]  ; tick
00000a  217d              MOVS     r1,#0x7d
00000c  00c9              LSLS     r1,r1,#3
00000e  4288              CMP      r0,r1
000010  dd0e              BLE      |L5.48|
;;;93       {
;;;94         tick = 0;
000012  2500              MOVS     r5,#0
;;;95         
;;;96         if(osCPU_TotalIdleTime > 1000)
000014  6165              STR      r5,[r4,#0x14]  ; tick
000016  6920              LDR      r0,[r4,#0x10]  ; osCPU_TotalIdleTime
000018  4288              CMP      r0,r1
00001a  d900              BLS      |L5.30|
;;;97         {
;;;98           osCPU_TotalIdleTime = 1000;
00001c  6121              STR      r1,[r4,#0x10]  ; osCPU_TotalIdleTime
                  |L5.30|
;;;99         }
;;;100        osCPU_Usage = (100 - (osCPU_TotalIdleTime * 100) / CALCULATION_PERIOD);
00001e  6920              LDR      r0,[r4,#0x10]  ; osCPU_TotalIdleTime
000020  2264              MOVS     r2,#0x64
000022  4350              MULS     r0,r2,r0
000024  f7fffffe          BL       __aeabi_uidivmod
000028  2164              MOVS     r1,#0x64
00002a  1a08              SUBS     r0,r1,r0
00002c  6060              STR      r0,[r4,#4]  ; osCPU_Usage
;;;101        osCPU_TotalIdleTime = 0;
00002e  6125              STR      r5,[r4,#0x10]  ; osCPU_TotalIdleTime
                  |L5.48|
;;;102      }
;;;103    }
000030  bd70              POP      {r4-r6,pc}
;;;104    
                          ENDP

000032  0000              DCW      0x0000
                  |L5.52|
                          DCD      ||.data||

                          AREA ||.data||, DATA, ALIGN=2

                  xIdleHandle
                          DCD      0x00000000
                  osCPU_Usage
                          DCD      0x00000000
                  osCPU_IdleStartTime
                          DCD      0x00000000
                  osCPU_IdleSpentTime
                          DCD      0x00000000
                  osCPU_TotalIdleTime
                          DCD      0x00000000
                  tick
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\CPU\\cpu_utils.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___11_cpu_utils_c_3562ac62____REV16|
#line 388 "..\\..\\..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___11_cpu_utils_c_3562ac62____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___11_cpu_utils_c_3562ac62____REVSH|
#line 402
|__asm___11_cpu_utils_c_3562ac62____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
