; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\list.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\list.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\..\..\Library\CMSIS\Include -I..\..\..\Library\Device\Nuvoton\M031\Include -I..\..\..\Library\StdDriver\inc -I..\..\..\ThirdParty\FreeRTOS\Source\include -I..\..\..\ThirdParty\FreeRTOS\Demo\Common\include -I..\..\..\ThirdParty\FreeRTOS\Source\portable\RVDS\ARM_CM0 -I..\..\..\ThirdParty\FreeRTOS -I..\..\Template -I..\CPU -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=526 --omf_browse=.\obj\list.crf ..\..\..\ThirdParty\FreeRTOS\Source\list.c]
                          THUMB

                          AREA ||i.uxListRemove||, CODE, READONLY, ALIGN=1

                  uxListRemove PROC
;;;169    
;;;170    UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
000000  6843              LDR      r3,[r0,#4]
;;;171    {
;;;172    /* The list item knows which list it is in.  Obtain the list from the list
;;;173    item. */
;;;174    List_t * const pxList = pxItemToRemove->pxContainer;
;;;175    
;;;176    	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
000002  6882              LDR      r2,[r0,#8]
000004  6901              LDR      r1,[r0,#0x10]
;;;177    	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
000006  609a              STR      r2,[r3,#8]
000008  6883              LDR      r3,[r0,#8]
00000a  6842              LDR      r2,[r0,#4]
;;;178    
;;;179    	/* Only used during decision coverage testing. */
;;;180    	mtCOVERAGE_TEST_DELAY();
;;;181    
;;;182    	/* Make sure the index is left pointing to a valid item. */
;;;183    	if( pxList->pxIndex == pxItemToRemove )
00000c  605a              STR      r2,[r3,#4]
00000e  684a              LDR      r2,[r1,#4]
000010  4282              CMP      r2,r0
000012  d101              BNE      |L1.24|
;;;184    	{
;;;185    		pxList->pxIndex = pxItemToRemove->pxPrevious;
000014  6882              LDR      r2,[r0,#8]
000016  604a              STR      r2,[r1,#4]
                  |L1.24|
;;;186    	}
;;;187    	else
;;;188    	{
;;;189    		mtCOVERAGE_TEST_MARKER();
;;;190    	}
;;;191    
;;;192    	pxItemToRemove->pxContainer = NULL;
000018  2200              MOVS     r2,#0
;;;193    	( pxList->uxNumberOfItems )--;
00001a  6102              STR      r2,[r0,#0x10]
00001c  6808              LDR      r0,[r1,#0]
00001e  1e40              SUBS     r0,r0,#1
000020  6008              STR      r0,[r1,#0]
;;;194    
;;;195    	return pxList->uxNumberOfItems;
000022  6808              LDR      r0,[r1,#0]
;;;196    }
000024  4770              BX       lr
;;;197    /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.vListInitialise||, CODE, READONLY, ALIGN=1

                  vListInitialise PROC
;;;36     
;;;37     void vListInitialise( List_t * const pxList )
000000  4601              MOV      r1,r0
;;;38     {
;;;39     	/* The list structure contains a list item which is used to mark the
;;;40     	end of the list.  To initialise the list the list end is inserted
;;;41     	as the only list entry. */
;;;42     	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
000002  3108              ADDS     r1,r1,#8
;;;43     
;;;44     	/* The list end value is the highest possible value in the list to
;;;45     	ensure it remains at the end of the list. */
;;;46     	pxList->xListEnd.xItemValue = portMAX_DELAY;
000004  2200              MOVS     r2,#0
;;;47     
;;;48     	/* The list end next and previous pointers point to itself so we know
;;;49     	when the list is empty. */
;;;50     	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
000006  6041              STR      r1,[r0,#4]
000008  43d2              MVNS     r2,r2                 ;46
;;;51     	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
00000a  60c1              STR      r1,[r0,#0xc]
;;;52     
;;;53     	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
00000c  6082              STR      r2,[r0,#8]
00000e  6101              STR      r1,[r0,#0x10]
000010  2100              MOVS     r1,#0
000012  6001              STR      r1,[r0,#0]
;;;54     
;;;55     	/* Write known values into the list if
;;;56     	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
;;;57     	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
;;;58     	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
;;;59     }
000014  4770              BX       lr
;;;60     /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.vListInitialiseItem||, CODE, READONLY, ALIGN=1

                  vListInitialiseItem PROC
;;;61     
;;;62     void vListInitialiseItem( ListItem_t * const pxItem )
000000  2100              MOVS     r1,#0
;;;63     {
;;;64     	/* Make sure the list item is not recorded as being on a list. */
;;;65     	pxItem->pxContainer = NULL;
000002  6101              STR      r1,[r0,#0x10]
;;;66     
;;;67     	/* Write known values into the list item if
;;;68     	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
;;;69     	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
;;;70     	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
;;;71     }
000004  4770              BX       lr
;;;72     /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.vListInsert||, CODE, READONLY, ALIGN=1

                  vListInsert PROC
;;;102    
;;;103    void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
000000  b530              PUSH     {r4,r5,lr}
;;;104    {
;;;105    ListItem_t *pxIterator;
;;;106    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
;;;107    
;;;108    	/* Only effective when configASSERT() is also defined, these tests may catch
;;;109    	the list data structures being overwritten in memory.  They will not catch
;;;110    	data errors caused by incorrect configuration or use of FreeRTOS. */
;;;111    	listTEST_LIST_INTEGRITY( pxList );
;;;112    	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );
;;;113    
;;;114    	/* Insert the new list item into the list, sorted in xItemValue order.
;;;115    
;;;116    	If the list already contains a list item with the same item value then the
;;;117    	new list item should be placed after it.  This ensures that TCBs which are
;;;118    	stored in ready lists (all of which have the same xItemValue value) get a
;;;119    	share of the CPU.  However, if the xItemValue is the same as the back marker
;;;120    	the iteration loop below will not end.  Therefore the value is checked
;;;121    	first, and the algorithm slightly modified if necessary. */
;;;122    	if( xValueOfInsertion == portMAX_DELAY )
000002  680c              LDR      r4,[r1,#0]
000004  1c62              ADDS     r2,r4,#1
000006  d002              BEQ      |L4.14|
;;;123    	{
;;;124    		pxIterator = pxList->xListEnd.pxPrevious;
;;;125    	}
;;;126    	else
;;;127    	{
;;;128    		/* *** NOTE ***********************************************************
;;;129    		If you find your application is crashing here then likely causes are
;;;130    		listed below.  In addition see https://www.freertos.org/FAQHelp.html for
;;;131    		more tips, and ensure configASSERT() is defined!
;;;132    		https://www.freertos.org/a00110.html#configASSERT
;;;133    
;;;134    			1) Stack overflow -
;;;135    			   see https://www.freertos.org/Stacks-and-stack-overflow-checking.html
;;;136    			2) Incorrect interrupt priority assignment, especially on Cortex-M
;;;137    			   parts where numerically high priority values denote low actual
;;;138    			   interrupt priorities, which can seem counter intuitive.  See
;;;139    			   https://www.freertos.org/RTOS-Cortex-M3-M4.html and the definition
;;;140    			   of configMAX_SYSCALL_INTERRUPT_PRIORITY on
;;;141    			   https://www.freertos.org/a00110.html
;;;142    			3) Calling an API function from within a critical section or when
;;;143    			   the scheduler is suspended, or calling an API function that does
;;;144    			   not end in "FromISR" from an interrupt.
;;;145    			4) Using a queue or semaphore before it has been initialised or
;;;146    			   before the scheduler has been started (are interrupts firing
;;;147    			   before vTaskStartScheduler() has been called?).
;;;148    		**********************************************************************/
;;;149    
;;;150    		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
000008  4602              MOV      r2,r0
00000a  3208              ADDS     r2,r2,#8
00000c  e002              B        |L4.20|
                  |L4.14|
00000e  6902              LDR      r2,[r0,#0x10]         ;124
000010  e004              B        |L4.28|
                  |L4.18|
000012  461a              MOV      r2,r3                 ;124
                  |L4.20|
000014  6853              LDR      r3,[r2,#4]
000016  681d              LDR      r5,[r3,#0]
000018  42a5              CMP      r5,r4
00001a  d9fa              BLS      |L4.18|
                  |L4.28|
;;;151    		{
;;;152    			/* There is nothing to do here, just iterating to the wanted
;;;153    			insertion position. */
;;;154    		}
;;;155    	}
;;;156    
;;;157    	pxNewListItem->pxNext = pxIterator->pxNext;
00001c  6853              LDR      r3,[r2,#4]
;;;158    	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
00001e  604b              STR      r3,[r1,#4]
;;;159    	pxNewListItem->pxPrevious = pxIterator;
000020  6099              STR      r1,[r3,#8]
;;;160    	pxIterator->pxNext = pxNewListItem;
000022  608a              STR      r2,[r1,#8]
;;;161    
;;;162    	/* Remember which list the item is in.  This allows fast removal of the
;;;163    	item later. */
;;;164    	pxNewListItem->pxContainer = pxList;
000024  6051              STR      r1,[r2,#4]
;;;165    
;;;166    	( pxList->uxNumberOfItems )++;
000026  6108              STR      r0,[r1,#0x10]
000028  6801              LDR      r1,[r0,#0]
00002a  1c49              ADDS     r1,r1,#1
00002c  6001              STR      r1,[r0,#0]
;;;167    }
00002e  bd30              POP      {r4,r5,pc}
;;;168    /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.vListInsertEnd||, CODE, READONLY, ALIGN=1

                  vListInsertEnd PROC
;;;73     
;;;74     void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
000000  6842              LDR      r2,[r0,#4]
;;;75     {
;;;76     ListItem_t * const pxIndex = pxList->pxIndex;
;;;77     
;;;78     	/* Only effective when configASSERT() is also defined, these tests may catch
;;;79     	the list data structures being overwritten in memory.  They will not catch
;;;80     	data errors caused by incorrect configuration or use of FreeRTOS. */
;;;81     	listTEST_LIST_INTEGRITY( pxList );
;;;82     	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );
;;;83     
;;;84     	/* Insert a new list item into pxList, but rather than sort the list,
;;;85     	makes the new list item the last item to be removed by a call to
;;;86     	listGET_OWNER_OF_NEXT_ENTRY(). */
;;;87     	pxNewListItem->pxNext = pxIndex;
;;;88     	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
000002  604a              STR      r2,[r1,#4]
000004  6893              LDR      r3,[r2,#8]
;;;89     
;;;90     	/* Only used during decision coverage testing. */
;;;91     	mtCOVERAGE_TEST_DELAY();
;;;92     
;;;93     	pxIndex->pxPrevious->pxNext = pxNewListItem;
000006  608b              STR      r3,[r1,#8]
000008  6893              LDR      r3,[r2,#8]
;;;94     	pxIndex->pxPrevious = pxNewListItem;
00000a  6059              STR      r1,[r3,#4]
;;;95     
;;;96     	/* Remember which list the item is in. */
;;;97     	pxNewListItem->pxContainer = pxList;
00000c  6091              STR      r1,[r2,#8]
;;;98     
;;;99     	( pxList->uxNumberOfItems )++;
00000e  6108              STR      r0,[r1,#0x10]
000010  6801              LDR      r1,[r0,#0]
000012  1c49              ADDS     r1,r1,#1
000014  6001              STR      r1,[r0,#0]
;;;100    }
000016  4770              BX       lr
;;;101    /*-----------------------------------------------------------*/
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\..\\ThirdParty\\FreeRTOS\\Source\\list.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_list_c_a968f7cb____REV16|
#line 388 "..\\..\\..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___6_list_c_a968f7cb____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_list_c_a968f7cb____REVSH|
#line 402
|__asm___6_list_c_a968f7cb____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
