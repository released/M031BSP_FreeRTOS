; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\main.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\main.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\..\..\Library\CMSIS\Include -I..\..\..\Library\Device\Nuvoton\M031\Include -I..\..\..\Library\StdDriver\inc -I..\..\..\ThirdParty\FreeRTOS\Source\include -I..\..\..\ThirdParty\FreeRTOS\Demo\Common\include -I..\..\..\ThirdParty\FreeRTOS\Source\portable\RVDS\ARM_CM0 -I..\..\..\ThirdParty\FreeRTOS -I..\..\Template -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=526 --omf_browse=.\obj\main.crf ..\main.c]
                          THUMB

                          AREA ||i.SYS_Init||, CODE, READONLY, ALIGN=2

                  SYS_Init PROC
;;;167    
;;;168    void SYS_Init(void)
000000  b570              PUSH     {r4-r6,lr}
000002  2059              MOVS     r0,#0x59
000004  4c1a              LDR      r4,|L1.112|
000006  2216              MOVS     r2,#0x16
000008  2188              MOVS     r1,#0x88
                  |L1.10|
00000a  6020              STR      r0,[r4,#0]
00000c  6022              STR      r2,[r4,#0]
00000e  6021              STR      r1,[r4,#0]
000010  6823              LDR      r3,[r4,#0]
000012  2b00              CMP      r3,#0
000014  d0f9              BEQ      |L1.10|
;;;169    {
;;;170        /* Unlock protected registers */
;;;171        SYS_UnlockReg();
;;;172    
;;;173        /* Enable HIRC clock (Internal RC 48MHz) */
;;;174        CLK_EnableXtalRC(CLK_PWRCTL_HIRCEN_Msk);
000016  2004              MOVS     r0,#4
000018  f7fffffe          BL       CLK_EnableXtalRC
;;;175    //    CLK_EnableXtalRC(CLK_PWRCTL_HXTEN_Msk);
;;;176    	
;;;177        /* Wait for HIRC clock ready */
;;;178        CLK_WaitClockReady(CLK_STATUS_HIRCSTB_Msk);
00001c  2010              MOVS     r0,#0x10
00001e  f7fffffe          BL       CLK_WaitClockReady
;;;179    //    CLK_WaitClockReady(CLK_STATUS_HXTSTB_Msk);
;;;180    	
;;;181        /* Select HCLK clock source as HIRC and HCLK source divider as 1 */
;;;182        CLK_SetHCLK(CLK_CLKSEL0_HCLKSEL_HIRC, CLK_CLKDIV0_HCLK(1));
000022  2100              MOVS     r1,#0
000024  2007              MOVS     r0,#7
000026  f7fffffe          BL       CLK_SetHCLK
;;;183    
;;;184        /* Enable UART0 clock */
;;;185        CLK_EnableModuleClock(UART0_MODULE);
00002a  4d12              LDR      r5,|L1.116|
00002c  4628              MOV      r0,r5
00002e  f7fffffe          BL       CLK_EnableModuleClock
;;;186        CLK_SetModuleClock(UART0_MODULE, CLK_CLKSEL1_UART0SEL_PCLK0, CLK_CLKDIV0_UART0(1));
000032  2101              MOVS     r1,#1
000034  2200              MOVS     r2,#0
000036  0689              LSLS     r1,r1,#26
000038  4628              MOV      r0,r5
00003a  f7fffffe          BL       CLK_SetModuleClock
;;;187    	
;;;188        CLK_EnableModuleClock(TMR3_MODULE);
00003e  4d0e              LDR      r5,|L1.120|
000040  4628              MOV      r0,r5
000042  f7fffffe          BL       CLK_EnableModuleClock
;;;189        CLK_SetModuleClock(TMR3_MODULE, CLK_CLKSEL1_TMR3SEL_PCLK1, 0);
000046  2101              MOVS     r1,#1
000048  2200              MOVS     r2,#0
00004a  0549              LSLS     r1,r1,#21
00004c  4628              MOV      r0,r5
00004e  f7fffffe          BL       CLK_SetModuleClock
;;;190    	
;;;191        /* Update System Core Clock */
;;;192        SystemCoreClockUpdate();
000052  f7fffffe          BL       SystemCoreClockUpdate
;;;193    
;;;194        /* Set PB multi-function pins for UART0 RXD=PB.12 and TXD=PB.13 */
;;;195        SYS->GPB_MFPH = (SYS->GPB_MFPH & ~(SYS_GPB_MFPH_PB12MFP_Msk | SYS_GPB_MFPH_PB13MFP_Msk))    |       \
000056  07a8              LSLS     r0,r5,#30
000058  6bc1              LDR      r1,[r0,#0x3c]
00005a  22ff              MOVS     r2,#0xff
00005c  0412              LSLS     r2,r2,#16
00005e  4391              BICS     r1,r1,r2
000060  2233              MOVS     r2,#0x33
000062  0452              LSLS     r2,r2,#17
000064  1889              ADDS     r1,r1,r2
000066  63c1              STR      r1,[r0,#0x3c]
000068  2000              MOVS     r0,#0
00006a  6020              STR      r0,[r4,#0]
;;;196                        (SYS_GPB_MFPH_PB12MFP_UART0_RXD | SYS_GPB_MFPH_PB13MFP_UART0_TXD);
;;;197    
;;;198        /* Lock protected registers */
;;;199        SYS_LockReg();
;;;200    }
00006c  bd70              POP      {r4-r6,pc}
;;;201    
                          ENDP

00006e  0000              DCW      0x0000
                  |L1.112|
                          DCD      0x40000100
                  |L1.116|
                          DCD      0x5f803d10
                  |L1.120|
                          DCD      0x5f400005

                          AREA ||i.TIMER3_Init||, CODE, READONLY, ALIGN=2

                  TIMER3_Init PROC
;;;141    
;;;142    void TIMER3_Init(void)
000000  b510              PUSH     {r4,lr}
;;;143    {
;;;144        TIMER_Open(TIMER3, TIMER_PERIODIC_MODE, 1000);
000002  4c0a              LDR      r4,|L2.44|
000004  227d              MOVS     r2,#0x7d
000006  2101              MOVS     r1,#1
000008  00d2              LSLS     r2,r2,#3
00000a  06c9              LSLS     r1,r1,#27
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       TIMER_Open
000012  6820              LDR      r0,[r4,#0]
000014  0621              LSLS     r1,r4,#24
000016  4308              ORRS     r0,r0,r1
000018  6020              STR      r0,[r4,#0]
00001a  1488              ASRS     r0,r1,#18
00001c  4904              LDR      r1,|L2.48|
00001e  6008              STR      r0,[r1,#0]
000020  6820              LDR      r0,[r4,#0]
000022  0589              LSLS     r1,r1,#22
000024  4308              ORRS     r0,r0,r1
000026  6020              STR      r0,[r4,#0]
;;;145        TIMER_EnableInt(TIMER3);
;;;146        NVIC_EnableIRQ(TMR3_IRQn);	
;;;147        TIMER_Start(TIMER3);
;;;148    }
000028  bd10              POP      {r4,pc}
;;;149    
                          ENDP

00002a  0000              DCW      0x0000
                  |L2.44|
                          DCD      0x40051020
                  |L2.48|
                          DCD      0xe000e100

                          AREA ||i.TMR3_IRQHandler||, CODE, READONLY, ALIGN=2

                  TMR3_IRQHandler PROC
;;;122    
;;;123    void TMR3_IRQHandler(void)
000000  4908              LDR      r1,|L3.36|
000002  6888              LDR      r0,[r1,#8]
000004  07c0              LSLS     r0,r0,#31
000006  0fc0              LSRS     r0,r0,#31
;;;124    {
000008  d00b              BEQ      |L3.34|
00000a  2001              MOVS     r0,#1
00000c  6088              STR      r0,[r1,#8]
;;;125    	static uint32_t LOG = 0;
;;;126    	static uint16_t CNT = 0;
;;;127    	
;;;128        if(TIMER_GetIntFlag(TIMER3) == 1)
;;;129        {
;;;130            TIMER_ClearIntFlag(TIMER3);
;;;131    	
;;;132    		if (CNT++ >= 1000)
00000e  4906              LDR      r1,|L3.40|
000010  8808              LDRH     r0,[r1,#0]  ; CNT
000012  1c42              ADDS     r2,r0,#1
000014  800a              STRH     r2,[r1,#0]
000016  227d              MOVS     r2,#0x7d
000018  00d2              LSLS     r2,r2,#3
00001a  4290              CMP      r0,r2
00001c  d301              BCC      |L3.34|
;;;133    		{		
;;;134    			CNT = 0;
00001e  2000              MOVS     r0,#0
000020  8008              STRH     r0,[r1,#0]
                  |L3.34|
;;;135    //        	printf("%s : %4d\r\n",__FUNCTION__,LOG++);
;;;136    		}
;;;137    		
;;;138        }
;;;139    }
000022  4770              BX       lr
;;;140    
                          ENDP

                  |L3.36|
                          DCD      0x40051020
                  |L3.40|
                          DCD      ||.data||

                          AREA ||i.UART0_Init||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  UART0_Init PROC
;;;150    
;;;151    void UART0_Init(void)
000000  b510              PUSH     {r4,lr}
;;;152    {
;;;153        SYS_ResetModule(UART0_RST);
000002  4825              LDR      r0,|L4.152|
000004  f7fffffe          BL       SYS_ResetModule
;;;154    
;;;155        /* Configure UART0 and set UART0 baud rate */
;;;156        UART_Open(UART0, 115200);
000008  21e1              MOVS     r1,#0xe1
00000a  0249              LSLS     r1,r1,#9
00000c  4823              LDR      r0,|L4.156|
00000e  f7fffffe          BL       UART_Open
;;;157    
;;;158    	/* Set UART receive time-out */
;;;159    //	UART_SetTimeoutCnt(UART0, 20);
;;;160    
;;;161    	printf("\r\nCLK_GetCPUFreq : %8d\r\n",CLK_GetCPUFreq());
000012  f7fffffe          BL       vTaskSuspendAll
000016  f7fffffe          BL       CLK_GetCPUFreq
00001a  4601              MOV      r1,r0
00001c  a020              ADR      r0,|L4.160|
00001e  f7fffffe          BL       __2printf
000022  4826              LDR      r0,|L4.188|
000024  f7fffffe          BL       fflush
000028  f7fffffe          BL       xTaskResumeAll
;;;162    	printf("CLK_GetHXTFreq : %8d\r\n",CLK_GetHXTFreq());
00002c  f7fffffe          BL       vTaskSuspendAll
000030  f7fffffe          BL       CLK_GetHXTFreq
000034  4601              MOV      r1,r0
000036  a022              ADR      r0,|L4.192|
000038  f7fffffe          BL       __2printf
00003c  481f              LDR      r0,|L4.188|
00003e  f7fffffe          BL       fflush
000042  f7fffffe          BL       xTaskResumeAll
;;;163    	printf("CLK_GetLXTFreq : %8d\r\n",CLK_GetLXTFreq());	
000046  f7fffffe          BL       vTaskSuspendAll
00004a  f7fffffe          BL       CLK_GetLXTFreq
00004e  4601              MOV      r1,r0
000050  a021              ADR      r0,|L4.216|
000052  f7fffffe          BL       __2printf
000056  4819              LDR      r0,|L4.188|
000058  f7fffffe          BL       fflush
00005c  f7fffffe          BL       xTaskResumeAll
;;;164    	printf("CLK_GetPCLK0Freq : %8d\r\n",CLK_GetPCLK0Freq());
000060  f7fffffe          BL       vTaskSuspendAll
000064  f7fffffe          BL       CLK_GetPCLK0Freq
000068  4601              MOV      r1,r0
00006a  a021              ADR      r0,|L4.240|
00006c  f7fffffe          BL       __2printf
000070  4812              LDR      r0,|L4.188|
000072  f7fffffe          BL       fflush
000076  f7fffffe          BL       xTaskResumeAll
;;;165    	printf("CLK_GetPCLK1Freq : %8d\r\n",CLK_GetPCLK1Freq());	
00007a  f7fffffe          BL       vTaskSuspendAll
00007e  f7fffffe          BL       CLK_GetPCLK1Freq
000082  4601              MOV      r1,r0
000084  a021              ADR      r0,|L4.268|
000086  f7fffffe          BL       __2printf
00008a  480c              LDR      r0,|L4.188|
00008c  f7fffffe          BL       fflush
000090  f7fffffe          BL       xTaskResumeAll
;;;166    }
000094  bd10              POP      {r4,pc}
;;;167    
                          ENDP

000096  0000              DCW      0x0000
                  |L4.152|
                          DCD      0x04000010
                  |L4.156|
                          DCD      0x40070000
                  |L4.160|
0000a0  0d0a434c          DCB      "\r\nCLK_GetCPUFreq : %8d\r\n",0
0000a4  4b5f4765
0000a8  74435055
0000ac  46726571
0000b0  203a2025
0000b4  38640d0a
0000b8  00      
0000b9  00                DCB      0
0000ba  00                DCB      0
0000bb  00                DCB      0
                  |L4.188|
                          DCD      __stdout
                  |L4.192|
0000c0  434c4b5f          DCB      "CLK_GetHXTFreq : %8d\r\n",0
0000c4  47657448
0000c8  58544672
0000cc  6571203a
0000d0  20253864
0000d4  0d0a00  
0000d7  00                DCB      0
                  |L4.216|
0000d8  434c4b5f          DCB      "CLK_GetLXTFreq : %8d\r\n",0
0000dc  4765744c
0000e0  58544672
0000e4  6571203a
0000e8  20253864
0000ec  0d0a00  
0000ef  00                DCB      0
                  |L4.240|
0000f0  434c4b5f          DCB      "CLK_GetPCLK0Freq : %8d\r\n",0
0000f4  47657450
0000f8  434c4b30
0000fc  46726571
000100  203a2025
000104  38640d0a
000108  00      
000109  00                DCB      0
00010a  00                DCB      0
00010b  00                DCB      0
                  |L4.268|
00010c  434c4b5f          DCB      "CLK_GetPCLK1Freq : %8d\r\n",0
000110  47657450
000114  434c4b31
000118  46726571
00011c  203a2025
000120  38640d0a
000124  00      
000125  00                DCB      0
000126  00                DCB      0
000127  00                DCB      0

                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                  main PROC
;;;209    
;;;210    int main()
000000  b51c              PUSH     {r2-r4,lr}
;;;211    {
;;;212    
;;;213        SYS_Init();
000002  f7fffffe          BL       SYS_Init
;;;214    
;;;215        UART0_Init();
000006  f7fffffe          BL       UART0_Init
;;;216    
;;;217    	TIMER3_Init();
00000a  f7fffffe          BL       TIMER3_Init
;;;218    
;;;219    
;;;220        xTaskCreate( vTaskLogMsg1s, "LogMsg1s", configMINIMAL_STACK_SIZE , NULL, mainNORMAL_TASK_PRIORITY, NULL );
00000e  2400              MOVS     r4,#0
000010  9400              STR      r4,[sp,#0]
000012  4623              MOV      r3,r4
000014  2280              MOVS     r2,#0x80
000016  a10c              ADR      r1,|L5.72|
000018  480e              LDR      r0,|L5.84|
00001a  9401              STR      r4,[sp,#4]
00001c  f7fffffe          BL       xTaskCreate
;;;221        xTaskCreate( vTaskLogMsg5s, "LogMsg5s", configMINIMAL_STACK_SIZE , NULL, mainNORMAL_TASK_PRIORITY, NULL );
000020  9400              STR      r4,[sp,#0]
000022  2300              MOVS     r3,#0
000024  2280              MOVS     r2,#0x80
000026  a10c              ADR      r1,|L5.88|
000028  480e              LDR      r0,|L5.100|
00002a  9401              STR      r4,[sp,#4]
00002c  f7fffffe          BL       xTaskCreate
;;;222        xTaskCreate( vTaskLogMsg500ms, "LogMsg500ms", configMINIMAL_STACK_SIZE , NULL, mainNORMAL_TASK_PRIORITY, NULL );
000030  9400              STR      r4,[sp,#0]
000032  2300              MOVS     r3,#0
000034  2280              MOVS     r2,#0x80
000036  a10c              ADR      r1,|L5.104|
000038  480e              LDR      r0,|L5.116|
00003a  9401              STR      r4,[sp,#4]
00003c  f7fffffe          BL       xTaskCreate
;;;223    	
;;;224        vTaskStartScheduler();
000040  f7fffffe          BL       vTaskStartScheduler
                  |L5.68|
;;;225    
;;;226        for( ;; );
000044  e7fe              B        |L5.68|
;;;227    }
;;;228    
                          ENDP

000046  0000              DCW      0x0000
                  |L5.72|
000048  4c6f674d          DCB      "LogMsg1s",0
00004c  73673173
000050  00      
000051  00                DCB      0
000052  00                DCB      0
000053  00                DCB      0
                  |L5.84|
                          DCD      vTaskLogMsg1s
                  |L5.88|
000058  4c6f674d          DCB      "LogMsg5s",0
00005c  73673573
000060  00      
000061  00                DCB      0
000062  00                DCB      0
000063  00                DCB      0
                  |L5.100|
                          DCD      vTaskLogMsg5s
                  |L5.104|
000068  4c6f674d          DCB      "LogMsg500ms",0
00006c  73673530
000070  306d7300
                  |L5.116|
                          DCD      vTaskLogMsg500ms

                          AREA ||i.vApplicationIdleHook||, CODE, READONLY, ALIGN=1

                  vApplicationIdleHook PROC
;;;83     
;;;84     __weak void vApplicationIdleHook(void)
000000  4770              BX       lr
;;;85     {
;;;86     
;;;87     }
;;;88     
                          ENDP


                          AREA ||i.vApplicationMallocFailedHook||, CODE, READONLY, ALIGN=1

                  vApplicationMallocFailedHook PROC
;;;93     
;;;94     __weak void vApplicationMallocFailedHook( void )
000000  b672              CPSID    i
                  |L7.2|
;;;95     {
;;;96     	/* vApplicationMallocFailedHook() will only be called if
;;;97     	configUSE_MALLOC_FAILED_HOOK is set to 1 in FreeRTOSConfig.h.  It is a hook
;;;98     	function that will get called if a call to pvPortMalloc() fails.
;;;99     	pvPortMalloc() is called internally by the kernel whenever a task, queue,
;;;100    	timer or semaphore is created.  It is also called by various parts of the
;;;101    	demo application.  If heap_1.c or heap_2.c are used, then the size of the
;;;102    	heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
;;;103    	FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
;;;104    	to query the size of free heap space that remains (although it does not
;;;105    	provide information on how the remaining heap might be fragmented). */
;;;106    	taskDISABLE_INTERRUPTS();
;;;107    	for( ;; );
000002  e7fe              B        |L7.2|
;;;108    }
;;;109    
                          ENDP


                          AREA ||i.vApplicationStackOverflowHook||, CODE, READONLY, ALIGN=1

                  vApplicationStackOverflowHook PROC
;;;109    
;;;110    __weak void vApplicationStackOverflowHook( TaskHandle_t pxTask, char *pcTaskName )
000000  b672              CPSID    i
                  |L8.2|
;;;111    {
;;;112    	( void ) pcTaskName;
;;;113    	( void ) pxTask;
;;;114    
;;;115    	/* Run time stack overflow checking is performed if
;;;116    	configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
;;;117    	function is called if a stack overflow is detected. */
;;;118    	taskDISABLE_INTERRUPTS();
;;;119    	for( ;; );
000002  e7fe              B        |L8.2|
;;;120    }
;;;121    
                          ENDP


                          AREA ||i.vApplicationTickHook||, CODE, READONLY, ALIGN=1

                  vApplicationTickHook PROC
;;;88     
;;;89     __weak void vApplicationTickHook( void )
000000  4770              BX       lr
;;;90     {
;;;91     
;;;92     }
;;;93     
                          ENDP


                          AREA ||i.vTaskLogMsg1s||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  vTaskLogMsg1s PROC
;;;65     
;;;66     void vTaskLogMsg1s( void *pvParameters )
000000  b508              PUSH     {r3,lr}
;;;67     {	
;;;68     	static uint32_t Cnt_LogMsg = 0;
;;;69     	uint32_t millisec = 1000;
000002  247d              MOVS     r4,#0x7d
000004  00e4              LSLS     r4,r4,#3
;;;70     
;;;71     	portTickType xLastWakeTime;
;;;72     	xLastWakeTime = xTaskGetTickCount();
000006  f7fffffe          BL       xTaskGetTickCount
;;;73     
;;;74     	(void) pvParameters;
;;;75     	for( ;; )
;;;76     	{
;;;77             vTaskDelayUntil( &xLastWakeTime, ( millisec *configTICK_RATE_HZ / ( ( TickType_t ) 1000 ) ));
00000a  9000              STR      r0,[sp,#0]
00000c  4620              MOV      r0,r4
00000e  4360              MULS     r0,r4,r0
000010  4621              MOV      r1,r4
000012  f7fffffe          BL       __aeabi_uidivmod
;;;78     		printf("vTaskLogMsg1s:Log(%4dms):%4d (%4d bytes)\r\n" ,millisec ,++Cnt_LogMsg,xPortGetFreeHeapSize());
000016  4d0c              LDR      r5,|L10.72|
000018  4606              MOV      r6,r0                 ;77
                  |L10.26|
00001a  4631              MOV      r1,r6                 ;77
00001c  4668              MOV      r0,sp                 ;77
00001e  f7fffffe          BL       vTaskDelayUntil
000022  f7fffffe          BL       vTaskSuspendAll
000026  f7fffffe          BL       xPortGetFreeHeapSize
00002a  68ea              LDR      r2,[r5,#0xc]  ; Cnt_LogMsg
00002c  4603              MOV      r3,r0
00002e  1c52              ADDS     r2,r2,#1
000030  4621              MOV      r1,r4
000032  a006              ADR      r0,|L10.76|
000034  60ea              STR      r2,[r5,#0xc]  ; Cnt_LogMsg
000036  f7fffffe          BL       __2printf
00003a  480f              LDR      r0,|L10.120|
00003c  f7fffffe          BL       fflush
000040  f7fffffe          BL       xTaskResumeAll
000044  e7e9              B        |L10.26|
;;;79     
;;;80     	}
;;;81       
;;;82     }
;;;83     
                          ENDP

000046  0000              DCW      0x0000
                  |L10.72|
                          DCD      ||.data||
                  |L10.76|
00004c  76546173          DCB      "vTaskLogMsg1s:Log(%4dms):%4d (%4d bytes)\r\n",0
000050  6b4c6f67
000054  4d736731
000058  733a4c6f
00005c  67282534
000060  646d7329
000064  3a253464
000068  20282534
00006c  64206279
000070  74657329
000074  0d0a00  
000077  00                DCB      0
                  |L10.120|
                          DCD      __stdout

                          AREA ||i.vTaskLogMsg500ms||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  vTaskLogMsg500ms PROC
;;;29     
;;;30     void vTaskLogMsg500ms( void *pvParameters )
000000  b508              PUSH     {r3,lr}
;;;31     {	
;;;32     	static uint32_t Cnt_LogMsg = 0;
;;;33     	uint32_t millisec = 500;
000002  24ff              MOVS     r4,#0xff
000004  34f5              ADDS     r4,r4,#0xf5
;;;34     
;;;35     	portTickType xLastWakeTime;
;;;36     	xLastWakeTime = xTaskGetTickCount();
000006  f7fffffe          BL       xTaskGetTickCount
;;;37     
;;;38     	(void) pvParameters;
;;;39     	for( ;; )
;;;40     	{
;;;41             vTaskDelayUntil( &xLastWakeTime, ( millisec *configTICK_RATE_HZ / ( ( TickType_t ) 1000 ) ));
00000a  9000              STR      r0,[sp,#0]
00000c  0060              LSLS     r0,r4,#1
00000e  4360              MULS     r0,r4,r0
000010  0061              LSLS     r1,r4,#1
000012  f7fffffe          BL       __aeabi_uidivmod
;;;42     		printf("vTaskLogMsg500ms:Log(%4dms):%4d (%4d bytes)\r\n" ,millisec ,++Cnt_LogMsg,xPortGetFreeHeapSize());
000016  4d0c              LDR      r5,|L11.72|
000018  4606              MOV      r6,r0                 ;41
                  |L11.26|
00001a  4631              MOV      r1,r6                 ;41
00001c  4668              MOV      r0,sp                 ;41
00001e  f7fffffe          BL       vTaskDelayUntil
000022  f7fffffe          BL       vTaskSuspendAll
000026  f7fffffe          BL       xPortGetFreeHeapSize
00002a  686a              LDR      r2,[r5,#4]  ; Cnt_LogMsg
00002c  4603              MOV      r3,r0
00002e  1c52              ADDS     r2,r2,#1
000030  4621              MOV      r1,r4
000032  a006              ADR      r0,|L11.76|
000034  606a              STR      r2,[r5,#4]  ; Cnt_LogMsg
000036  f7fffffe          BL       __2printf
00003a  4810              LDR      r0,|L11.124|
00003c  f7fffffe          BL       fflush
000040  f7fffffe          BL       xTaskResumeAll
000044  e7e9              B        |L11.26|
;;;43     
;;;44     	}
;;;45       
;;;46     }
;;;47     
                          ENDP

000046  0000              DCW      0x0000
                  |L11.72|
                          DCD      ||.data||
                  |L11.76|
00004c  76546173          DCB      "vTaskLogMsg500ms:Log(%4dms):%4d (%4d bytes)\r\n",0
000050  6b4c6f67
000054  4d736735
000058  30306d73
00005c  3a4c6f67
000060  28253464
000064  6d73293a
000068  25346420
00006c  28253464
000070  20627974
000074  6573290d
000078  0a00    
00007a  00                DCB      0
00007b  00                DCB      0
                  |L11.124|
                          DCD      __stdout

                          AREA ||i.vTaskLogMsg5s||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  vTaskLogMsg5s PROC
;;;47     
;;;48     void vTaskLogMsg5s( void *pvParameters )
000000  b508              PUSH     {r3,lr}
;;;49     {	
;;;50     	static uint32_t Cnt_LogMsg = 0;
;;;51     	uint32_t millisec = 5000;
000002  4c11              LDR      r4,|L12.72|
;;;52     
;;;53     	portTickType xLastWakeTime;
;;;54     	xLastWakeTime = xTaskGetTickCount();
000004  f7fffffe          BL       xTaskGetTickCount
;;;55     
;;;56     	(void) pvParameters;
;;;57     	for( ;; )
;;;58     	{
;;;59             vTaskDelayUntil( &xLastWakeTime, ( millisec *configTICK_RATE_HZ / ( ( TickType_t ) 1000 ) ));
000008  9000              STR      r0,[sp,#0]
00000a  207d              MOVS     r0,#0x7d
00000c  00c0              LSLS     r0,r0,#3
00000e  217d              MOVS     r1,#0x7d
000010  4360              MULS     r0,r4,r0
000012  00c9              LSLS     r1,r1,#3
000014  f7fffffe          BL       __aeabi_uidivmod
;;;60     		printf("vTaskLogMsg5s:Log(%4dms):%4d (%4d bytes)\r\n" ,millisec ,++Cnt_LogMsg,xPortGetFreeHeapSize());
000018  4d0c              LDR      r5,|L12.76|
00001a  4606              MOV      r6,r0                 ;59
                  |L12.28|
00001c  4631              MOV      r1,r6                 ;59
00001e  4668              MOV      r0,sp                 ;59
000020  f7fffffe          BL       vTaskDelayUntil
000024  f7fffffe          BL       vTaskSuspendAll
000028  f7fffffe          BL       xPortGetFreeHeapSize
00002c  68aa              LDR      r2,[r5,#8]  ; Cnt_LogMsg
00002e  4603              MOV      r3,r0
000030  1c52              ADDS     r2,r2,#1
000032  4621              MOV      r1,r4
000034  a006              ADR      r0,|L12.80|
000036  60aa              STR      r2,[r5,#8]  ; Cnt_LogMsg
000038  f7fffffe          BL       __2printf
00003c  480f              LDR      r0,|L12.124|
00003e  f7fffffe          BL       fflush
000042  f7fffffe          BL       xTaskResumeAll
000046  e7e9              B        |L12.28|
;;;61     
;;;62     	}
;;;63       
;;;64     }
;;;65     
                          ENDP

                  |L12.72|
                          DCD      0x00001388
                  |L12.76|
                          DCD      ||.data||
                  |L12.80|
000050  76546173          DCB      "vTaskLogMsg5s:Log(%4dms):%4d (%4d bytes)\r\n",0
000054  6b4c6f67
000058  4d736735
00005c  733a4c6f
000060  67282534
000064  646d7329
000068  3a253464
00006c  20282534
000070  64206279
000074  74657329
000078  0d0a00  
00007b  00                DCB      0
                  |L12.124|
                          DCD      __stdout

                          AREA ||.data||, DATA, ALIGN=2

                  ||CNT||
000000  0000              DCW      0x0000
000002  0000              DCB      0x00,0x00
                  Cnt_LogMsg
                          DCD      0x00000000
                  |symbol_number.38|
                          DCD      0x00000000
                  |symbol_number.39|
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\main.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_310ea391____REV16|
#line 388 "..\\..\\..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___6_main_c_310ea391____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_310ea391____REVSH|
#line 402
|__asm___6_main_c_310ea391____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
