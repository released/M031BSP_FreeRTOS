; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\main.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\main.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\..\..\Library\CMSIS\Include -I..\..\..\Library\Device\Nuvoton\M031\Include -I..\..\..\Library\StdDriver\inc -I..\..\..\ThirdParty\FreeRTOS\Source\include -I..\..\..\ThirdParty\FreeRTOS\Demo\Common\include -I..\..\..\ThirdParty\FreeRTOS\Source\portable\RVDS\ARM_CM0 -I..\..\..\ThirdParty\FreeRTOS -I..\..\Template -I..\CPU -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=526 --omf_browse=.\obj\main.crf ..\main.c]
                          THUMB

                          AREA ||i.BitFlag_SwitchTest||, CODE, READONLY, ALIGN=2

                  BitFlag_SwitchTest PROC
;;;153    
;;;154    void BitFlag_SwitchTest(uint8_t On)
000000  4a07              LDR      r2,|L1.32|
;;;155    {
;;;156    	//BitFlag TEST
;;;157    	if (On)
000002  2800              CMP      r0,#0
;;;158    	{
;;;159    		BitFlag_ON(ReadBit(BitFlag_AAA));
000004  7851              LDRB     r1,[r2,#1]
000006  d005              BEQ      |L1.20|
000008  2001              MOVS     r0,#1
00000a  4301              ORRS     r1,r1,r0
;;;160    		BitFlag_OFF(ReadBit(BitFlag_BBB));
00000c  20e1              MOVS     r0,#0xe1
00000e  4001              ANDS     r1,r1,r0
;;;161    		BitFlag_OFF(ReadBit(BitFlag_CCC));
;;;162    		BitFlag_OFF(ReadBit(BitFlag_DDD));
;;;163    		BitFlag_OFF(ReadBit(BitFlag_EEE));
000010  7051              STRB     r1,[r2,#1]
;;;164    	}
;;;165    	else
;;;166    	{
;;;167    		BitFlag_OFF(ReadBit(BitFlag_AAA));
;;;168    		BitFlag_ON(ReadBit(BitFlag_BBB));
;;;169    		BitFlag_ON(ReadBit(BitFlag_CCC));
;;;170    		BitFlag_ON(ReadBit(BitFlag_DDD));
;;;171    		BitFlag_ON(ReadBit(BitFlag_EEE));
;;;172    	}
;;;173    }
000012  4770              BX       lr
                  |L1.20|
000014  0848              LSRS     r0,r1,#1              ;167
000016  0040              LSLS     r0,r0,#1              ;167
000018  211e              MOVS     r1,#0x1e              ;168
00001a  4308              ORRS     r0,r0,r1              ;168
00001c  7050              STRB     r0,[r2,#1]            ;171
00001e  4770              BX       lr
;;;174    
                          ENDP

                  |L1.32|
                          DCD      ||.data||

                          AREA ||i.RecvPacket||, CODE, READONLY, ALIGN=2

                  RecvPacket PROC
;;;144    
;;;145    unsigned int RecvPacket(CommPacket* pData, unsigned int iLen)
000000  b510              PUSH     {r4,lr}
;;;146    {
;;;147    
;;;148    	memcpy(pData,&gPacket,sizeof(gPacket));
000002  2224              MOVS     r2,#0x24
000004  4902              LDR      r1,|L2.16|
000006  f7fffffe          BL       __aeabi_memcpy4
;;;149    	
;;;150    	return 0;
00000a  2000              MOVS     r0,#0
;;;151    }
00000c  bd10              POP      {r4,pc}
;;;152    
                          ENDP

00000e  0000              DCW      0x0000
                  |L2.16|
                          DCD      ||.data||+0x14

                          AREA ||i.SYS_Init||, CODE, READONLY, ALIGN=2

                  SYS_Init PROC
;;;514    
;;;515    void SYS_Init(void)
000000  b570              PUSH     {r4-r6,lr}
000002  2059              MOVS     r0,#0x59
000004  4c1a              LDR      r4,|L3.112|
000006  2216              MOVS     r2,#0x16
000008  2188              MOVS     r1,#0x88
                  |L3.10|
00000a  6020              STR      r0,[r4,#0]
00000c  6022              STR      r2,[r4,#0]
00000e  6021              STR      r1,[r4,#0]
000010  6823              LDR      r3,[r4,#0]
000012  2b00              CMP      r3,#0
000014  d0f9              BEQ      |L3.10|
;;;516    {
;;;517        /* Unlock protected registers */
;;;518        SYS_UnlockReg();
;;;519    
;;;520        /* Enable HIRC clock (Internal RC 48MHz) */
;;;521        CLK_EnableXtalRC(CLK_PWRCTL_HIRCEN_Msk);
000016  2004              MOVS     r0,#4
000018  f7fffffe          BL       CLK_EnableXtalRC
;;;522    //    CLK_EnableXtalRC(CLK_PWRCTL_HXTEN_Msk);
;;;523    	
;;;524        /* Wait for HIRC clock ready */
;;;525        CLK_WaitClockReady(CLK_STATUS_HIRCSTB_Msk);
00001c  2010              MOVS     r0,#0x10
00001e  f7fffffe          BL       CLK_WaitClockReady
;;;526    //    CLK_WaitClockReady(CLK_STATUS_HXTSTB_Msk);
;;;527    	
;;;528        /* Select HCLK clock source as HIRC and HCLK source divider as 1 */
;;;529        CLK_SetHCLK(CLK_CLKSEL0_HCLKSEL_HIRC, CLK_CLKDIV0_HCLK(1));
000022  2100              MOVS     r1,#0
000024  2007              MOVS     r0,#7
000026  f7fffffe          BL       CLK_SetHCLK
;;;530    
;;;531        /* Enable UART0 clock */
;;;532        CLK_EnableModuleClock(UART0_MODULE);
00002a  4d12              LDR      r5,|L3.116|
00002c  4628              MOV      r0,r5
00002e  f7fffffe          BL       CLK_EnableModuleClock
;;;533        CLK_SetModuleClock(UART0_MODULE, CLK_CLKSEL1_UART0SEL_PCLK0, CLK_CLKDIV0_UART0(1));
000032  2101              MOVS     r1,#1
000034  2200              MOVS     r2,#0
000036  0689              LSLS     r1,r1,#26
000038  4628              MOV      r0,r5
00003a  f7fffffe          BL       CLK_SetModuleClock
;;;534    	
;;;535        CLK_EnableModuleClock(TMR3_MODULE);
00003e  4d0e              LDR      r5,|L3.120|
000040  4628              MOV      r0,r5
000042  f7fffffe          BL       CLK_EnableModuleClock
;;;536        CLK_SetModuleClock(TMR3_MODULE, CLK_CLKSEL1_TMR3SEL_PCLK1, 0);
000046  2101              MOVS     r1,#1
000048  2200              MOVS     r2,#0
00004a  0549              LSLS     r1,r1,#21
00004c  4628              MOV      r0,r5
00004e  f7fffffe          BL       CLK_SetModuleClock
;;;537    	
;;;538        /* Update System Core Clock */
;;;539        SystemCoreClockUpdate();
000052  f7fffffe          BL       SystemCoreClockUpdate
;;;540    
;;;541        /* Set PB multi-function pins for UART0 RXD=PB.12 and TXD=PB.13 */
;;;542        SYS->GPB_MFPH = (SYS->GPB_MFPH & ~(SYS_GPB_MFPH_PB12MFP_Msk | SYS_GPB_MFPH_PB13MFP_Msk))    |       \
000056  07a8              LSLS     r0,r5,#30
000058  6bc1              LDR      r1,[r0,#0x3c]
00005a  22ff              MOVS     r2,#0xff
00005c  0412              LSLS     r2,r2,#16
00005e  4391              BICS     r1,r1,r2
000060  2233              MOVS     r2,#0x33
000062  0452              LSLS     r2,r2,#17
000064  1889              ADDS     r1,r1,r2
000066  63c1              STR      r1,[r0,#0x3c]
000068  2000              MOVS     r0,#0
00006a  6020              STR      r0,[r4,#0]
;;;543                        (SYS_GPB_MFPH_PB12MFP_UART0_RXD | SYS_GPB_MFPH_PB13MFP_UART0_TXD);
;;;544    
;;;545        /* Lock protected registers */
;;;546        SYS_LockReg();
;;;547    }
00006c  bd70              POP      {r4-r6,pc}
;;;548    
                          ENDP

00006e  0000              DCW      0x0000
                  |L3.112|
                          DCD      0x40000100
                  |L3.116|
                          DCD      0x5f803d10
                  |L3.120|
                          DCD      0x5f400005

                          AREA ||i.SendPacket||, CODE, READONLY, ALIGN=1

                  SendPacket PROC
;;;122    
;;;123    void SendPacket(CommPacket* pData, unsigned int iLen)
000000  7801              LDRB     r1,[r0,#0]
;;;124    {
;;;125    	switch(pData->type)
000002  2900              CMP      r1,#0
000004  d00d              BEQ      |L4.34|
000006  2901              CMP      r1,#1
000008  d012              BEQ      |L4.48|
00000a  2902              CMP      r1,#2
00000c  d108              BNE      |L4.32|
;;;126    	{
;;;127    		case Type_A:
;;;128    			pData->structutre.Struct_A.var_a += 1;
;;;129    			pData->structutre.Struct_A.var_b += 1;			
;;;130    			break;
;;;131    			
;;;132    		case Type_B:
;;;133    			pData->structutre.Struct_B.var_a += 10;
;;;134    			pData->structutre.Struct_B.var_b += 10;	
;;;135    			break;
;;;136    			
;;;137    		case Type_C:
;;;138    			pData->structutre.Struct_C.var_a += 100;
00000e  6941              LDR      r1,[r0,#0x14]
000010  3164              ADDS     r1,r1,#0x64
;;;139    			pData->structutre.Struct_C.var_b += 100;
000012  6141              STR      r1,[r0,#0x14]
000014  6981              LDR      r1,[r0,#0x18]
000016  3164              ADDS     r1,r1,#0x64
;;;140    			pData->structutre.Struct_C.var_c += 100;			
000018  6181              STR      r1,[r0,#0x18]
00001a  69c1              LDR      r1,[r0,#0x1c]
00001c  3164              ADDS     r1,r1,#0x64
;;;141    			break;
00001e  61c1              STR      r1,[r0,#0x1c]
                  |L4.32|
;;;142    	}
;;;143    }
000020  4770              BX       lr
                  |L4.34|
000022  6841              LDR      r1,[r0,#4]            ;128
000024  1c49              ADDS     r1,r1,#1              ;128
000026  6041              STR      r1,[r0,#4]            ;129
000028  6881              LDR      r1,[r0,#8]            ;129
00002a  1c49              ADDS     r1,r1,#1              ;129
00002c  6081              STR      r1,[r0,#8]            ;130
00002e  4770              BX       lr
                  |L4.48|
000030  68c1              LDR      r1,[r0,#0xc]          ;133
000032  310a              ADDS     r1,r1,#0xa            ;133
000034  60c1              STR      r1,[r0,#0xc]          ;134
000036  6901              LDR      r1,[r0,#0x10]         ;134
000038  310a              ADDS     r1,r1,#0xa            ;134
00003a  6101              STR      r1,[r0,#0x10]         ;134
00003c  4770              BX       lr
;;;144    
                          ENDP


                          AREA ||i.TIMER3_Init||, CODE, READONLY, ALIGN=2

                  TIMER3_Init PROC
;;;488    
;;;489    void TIMER3_Init(void)
000000  b510              PUSH     {r4,lr}
;;;490    {
;;;491        TIMER_Open(TIMER3, TIMER_PERIODIC_MODE, 1000);
000002  4c0a              LDR      r4,|L5.44|
000004  227d              MOVS     r2,#0x7d
000006  2101              MOVS     r1,#1
000008  00d2              LSLS     r2,r2,#3
00000a  06c9              LSLS     r1,r1,#27
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       TIMER_Open
000012  6820              LDR      r0,[r4,#0]
000014  0621              LSLS     r1,r4,#24
000016  4308              ORRS     r0,r0,r1
000018  6020              STR      r0,[r4,#0]
00001a  1488              ASRS     r0,r1,#18
00001c  4904              LDR      r1,|L5.48|
00001e  6008              STR      r0,[r1,#0]
000020  6820              LDR      r0,[r4,#0]
000022  0589              LSLS     r1,r1,#22
000024  4308              ORRS     r0,r0,r1
000026  6020              STR      r0,[r4,#0]
;;;492        TIMER_EnableInt(TIMER3);
;;;493        NVIC_EnableIRQ(TMR3_IRQn);	
;;;494        TIMER_Start(TIMER3);
;;;495    }
000028  bd10              POP      {r4,pc}
;;;496    
                          ENDP

00002a  0000              DCW      0x0000
                  |L5.44|
                          DCD      0x40051020
                  |L5.48|
                          DCD      0xe000e100

                          AREA ||i.TMR3_IRQHandler||, CODE, READONLY, ALIGN=2

                  TMR3_IRQHandler PROC
;;;469    
;;;470    void TMR3_IRQHandler(void)
000000  4908              LDR      r1,|L6.36|
000002  6888              LDR      r0,[r1,#8]
000004  07c0              LSLS     r0,r0,#31
000006  0fc0              LSRS     r0,r0,#31
;;;471    {
000008  d00b              BEQ      |L6.34|
00000a  2001              MOVS     r0,#1
00000c  6088              STR      r0,[r1,#8]
;;;472    	static uint32_t LOG = 0;
;;;473    	static uint16_t CNT = 0;
;;;474    	
;;;475        if(TIMER_GetIntFlag(TIMER3) == 1)
;;;476        {
;;;477            TIMER_ClearIntFlag(TIMER3);
;;;478    	
;;;479    		if (CNT++ >= 1000)
00000e  4906              LDR      r1,|L6.40|
000010  8888              LDRH     r0,[r1,#4]  ; CNT
000012  1c42              ADDS     r2,r0,#1
000014  808a              STRH     r2,[r1,#4]
000016  227d              MOVS     r2,#0x7d
000018  00d2              LSLS     r2,r2,#3
00001a  4290              CMP      r0,r2
00001c  d301              BCC      |L6.34|
;;;480    		{		
;;;481    			CNT = 0;
00001e  2000              MOVS     r0,#0
000020  8088              STRH     r0,[r1,#4]
                  |L6.34|
;;;482    //        	printf("%s : %4d\r\n",__FUNCTION__,LOG++);
;;;483    		}
;;;484    		
;;;485        }
;;;486    }
000022  4770              BX       lr
;;;487    
                          ENDP

                  |L6.36|
                          DCD      0x40051020
                  |L6.40|
                          DCD      ||.data||

                          AREA ||i.UART0_Init||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  UART0_Init PROC
;;;497    
;;;498    void UART0_Init(void)
000000  b510              PUSH     {r4,lr}
;;;499    {
;;;500        SYS_ResetModule(UART0_RST);
000002  4825              LDR      r0,|L7.152|
000004  f7fffffe          BL       SYS_ResetModule
;;;501    
;;;502        /* Configure UART0 and set UART0 baud rate */
;;;503        UART_Open(UART0, 115200);
000008  21e1              MOVS     r1,#0xe1
00000a  0249              LSLS     r1,r1,#9
00000c  4823              LDR      r0,|L7.156|
00000e  f7fffffe          BL       UART_Open
;;;504    
;;;505    	/* Set UART receive time-out */
;;;506    //	UART_SetTimeoutCnt(UART0, 20);
;;;507    
;;;508    	printf("\r\nCLK_GetCPUFreq : %8d\r\n",CLK_GetCPUFreq());
000012  f7fffffe          BL       vTaskSuspendAll
000016  f7fffffe          BL       CLK_GetCPUFreq
00001a  4601              MOV      r1,r0
00001c  a020              ADR      r0,|L7.160|
00001e  f7fffffe          BL       __2printf
000022  4826              LDR      r0,|L7.188|
000024  f7fffffe          BL       fflush
000028  f7fffffe          BL       xTaskResumeAll
;;;509    	printf("CLK_GetHXTFreq : %8d\r\n",CLK_GetHXTFreq());
00002c  f7fffffe          BL       vTaskSuspendAll
000030  f7fffffe          BL       CLK_GetHXTFreq
000034  4601              MOV      r1,r0
000036  a022              ADR      r0,|L7.192|
000038  f7fffffe          BL       __2printf
00003c  481f              LDR      r0,|L7.188|
00003e  f7fffffe          BL       fflush
000042  f7fffffe          BL       xTaskResumeAll
;;;510    	printf("CLK_GetLXTFreq : %8d\r\n",CLK_GetLXTFreq());	
000046  f7fffffe          BL       vTaskSuspendAll
00004a  f7fffffe          BL       CLK_GetLXTFreq
00004e  4601              MOV      r1,r0
000050  a021              ADR      r0,|L7.216|
000052  f7fffffe          BL       __2printf
000056  4819              LDR      r0,|L7.188|
000058  f7fffffe          BL       fflush
00005c  f7fffffe          BL       xTaskResumeAll
;;;511    	printf("CLK_GetPCLK0Freq : %8d\r\n",CLK_GetPCLK0Freq());
000060  f7fffffe          BL       vTaskSuspendAll
000064  f7fffffe          BL       CLK_GetPCLK0Freq
000068  4601              MOV      r1,r0
00006a  a021              ADR      r0,|L7.240|
00006c  f7fffffe          BL       __2printf
000070  4812              LDR      r0,|L7.188|
000072  f7fffffe          BL       fflush
000076  f7fffffe          BL       xTaskResumeAll
;;;512    	printf("CLK_GetPCLK1Freq : %8d\r\n",CLK_GetPCLK1Freq());	
00007a  f7fffffe          BL       vTaskSuspendAll
00007e  f7fffffe          BL       CLK_GetPCLK1Freq
000082  4601              MOV      r1,r0
000084  a021              ADR      r0,|L7.268|
000086  f7fffffe          BL       __2printf
00008a  480c              LDR      r0,|L7.188|
00008c  f7fffffe          BL       fflush
000090  f7fffffe          BL       xTaskResumeAll
;;;513    }
000094  bd10              POP      {r4,pc}
;;;514    
                          ENDP

000096  0000              DCW      0x0000
                  |L7.152|
                          DCD      0x04000010
                  |L7.156|
                          DCD      0x40070000
                  |L7.160|
0000a0  0d0a434c          DCB      "\r\nCLK_GetCPUFreq : %8d\r\n",0
0000a4  4b5f4765
0000a8  74435055
0000ac  46726571
0000b0  203a2025
0000b4  38640d0a
0000b8  00      
0000b9  00                DCB      0
0000ba  00                DCB      0
0000bb  00                DCB      0
                  |L7.188|
                          DCD      __stdout
                  |L7.192|
0000c0  434c4b5f          DCB      "CLK_GetHXTFreq : %8d\r\n",0
0000c4  47657448
0000c8  58544672
0000cc  6571203a
0000d0  20253864
0000d4  0d0a00  
0000d7  00                DCB      0
                  |L7.216|
0000d8  434c4b5f          DCB      "CLK_GetLXTFreq : %8d\r\n",0
0000dc  4765744c
0000e0  58544672
0000e4  6571203a
0000e8  20253864
0000ec  0d0a00  
0000ef  00                DCB      0
                  |L7.240|
0000f0  434c4b5f          DCB      "CLK_GetPCLK0Freq : %8d\r\n",0
0000f4  47657450
0000f8  434c4b30
0000fc  46726571
000100  203a2025
000104  38640d0a
000108  00      
000109  00                DCB      0
00010a  00                DCB      0
00010b  00                DCB      0
                  |L7.268|
00010c  434c4b5f          DCB      "CLK_GetPCLK1Freq : %8d\r\n",0
000110  47657450
000114  434c4b31
000118  46726571
00011c  203a2025
000120  38640d0a
000124  00      
000125  00                DCB      0
000126  00                DCB      0
000127  00                DCB      0

                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                  main PROC
;;;556    
;;;557    int main()
000000  b51c              PUSH     {r2-r4,lr}
;;;558    {
;;;559    
;;;560        SYS_Init();
000002  f7fffffe          BL       SYS_Init
;;;561    
;;;562        UART0_Init();
000006  f7fffffe          BL       UART0_Init
;;;563    
;;;564    	TIMER3_Init();
00000a  f7fffffe          BL       TIMER3_Init
;;;565    
;;;566    
;;;567        xTaskCreate( vTaskLogMsg1s, "LogMsg1s"			,configMINIMAL_STACK_SIZE 	, NULL	, mainNORMAL_TASK_PRIORITY		, NULL);
00000e  2400              MOVS     r4,#0
000010  9400              STR      r4,[sp,#0]
000012  4623              MOV      r3,r4
000014  2280              MOVS     r2,#0x80
000016  a124              ADR      r1,|L8.168|
000018  4826              LDR      r0,|L8.180|
00001a  9401              STR      r4,[sp,#4]
00001c  f7fffffe          BL       xTaskCreate
;;;568        xTaskCreate( vTaskLogMsg5s, "LogMsg5s"			,configMINIMAL_STACK_SIZE 	, NULL	, mainNORMAL_TASK_PRIORITY		, NULL);
000020  9400              STR      r4,[sp,#0]
000022  2300              MOVS     r3,#0
000024  2280              MOVS     r2,#0x80
000026  a124              ADR      r1,|L8.184|
000028  4826              LDR      r0,|L8.196|
00002a  9401              STR      r4,[sp,#4]
00002c  f7fffffe          BL       xTaskCreate
;;;569        xTaskCreate( vTaskLogMsg500ms, "LogMsg500ms"	,configMINIMAL_STACK_SIZE 	, NULL	, mainNORMAL_TASK_PRIORITY		, NULL);
000030  9400              STR      r4,[sp,#0]
000032  2300              MOVS     r3,#0
000034  2280              MOVS     r2,#0x80
000036  a124              ADR      r1,|L8.200|
000038  4826              LDR      r0,|L8.212|
00003a  9401              STR      r4,[sp,#4]
00003c  f7fffffe          BL       xTaskCreate
;;;570    
;;;571    	//function flag enable and create sub task
;;;572    	xTaskCreate(vTaskRisingFlag	,"vTaskRising"			,configMINIMAL_STACK_SIZE	,NULL	,mainNORMAL_TASK_PRIORITY		,NULL);   	
000040  9400              STR      r4,[sp,#0]
000042  2300              MOVS     r3,#0
000044  2280              MOVS     r2,#0x80
000046  a124              ADR      r1,|L8.216|
000048  4826              LDR      r0,|L8.228|
00004a  9401              STR      r4,[sp,#4]
00004c  f7fffffe          BL       xTaskCreate
;;;573    	xTaskCreate(vTaskCreateTask	,"vTaskCreate"		,configMINIMAL_STACK_SIZE	,NULL	,mainNORMAL_TASK_PRIORITY		,NULL); 
000050  9400              STR      r4,[sp,#0]
000052  2300              MOVS     r3,#0
000054  2280              MOVS     r2,#0x80
000056  a124              ADR      r1,|L8.232|
000058  4826              LDR      r0,|L8.244|
00005a  9401              STR      r4,[sp,#4]
00005c  f7fffffe          BL       xTaskCreate
;;;574    	//send data into structure and read
;;;575    	xTaskCreate(vTaskSendPacket	,"vTaskSend"			,configMINIMAL_STACK_SIZE	,NULL	,mainNORMAL_TASK_PRIORITY		,NULL); 
000060  9400              STR      r4,[sp,#0]
000062  2300              MOVS     r3,#0
000064  2280              MOVS     r2,#0x80
000066  a124              ADR      r1,|L8.248|
000068  4826              LDR      r0,|L8.260|
00006a  9401              STR      r4,[sp,#4]
00006c  f7fffffe          BL       xTaskCreate
;;;576    	xTaskCreate(vTaskRecvPacket	,"vTaskRecv"			,configMINIMAL_STACK_SIZE	,NULL	,mainNORMAL_TASK_PRIORITY		,NULL); 
000070  9400              STR      r4,[sp,#0]
000072  2300              MOVS     r3,#0
000074  2280              MOVS     r2,#0x80
000076  a124              ADR      r1,|L8.264|
000078  4826              LDR      r0,|L8.276|
00007a  9401              STR      r4,[sp,#4]
00007c  f7fffffe          BL       xTaskCreate
;;;577    	//display current task list
;;;578    	xTaskCreate(vTaskTasklist		,"vTaskTasklist"		,configMINIMAL_STACK_SIZE*2	,NULL	,mainNORMAL_TASK_PRIORITY		,NULL); 	
000080  22ff              MOVS     r2,#0xff
000082  9400              STR      r4,[sp,#0]
000084  2300              MOVS     r3,#0
000086  3201              ADDS     r2,#1
000088  a123              ADR      r1,|L8.280|
00008a  4827              LDR      r0,|L8.296|
00008c  9401              STR      r4,[sp,#4]
00008e  f7fffffe          BL       xTaskCreate
;;;579    	//bit flag switch
;;;580    	xTaskCreate(vTaskBitFlagSwitch	,"vTaskBitFlag"		,configMINIMAL_STACK_SIZE	,NULL	,mainNORMAL_TASK_PRIORITY		,NULL); 
000092  9400              STR      r4,[sp,#0]
000094  2300              MOVS     r3,#0
000096  2280              MOVS     r2,#0x80
000098  a124              ADR      r1,|L8.300|
00009a  4828              LDR      r0,|L8.316|
00009c  9401              STR      r4,[sp,#4]
00009e  f7fffffe          BL       xTaskCreate
;;;581    
;;;582    	
;;;583        vTaskStartScheduler();
0000a2  f7fffffe          BL       vTaskStartScheduler
                  |L8.166|
;;;584    
;;;585        for( ;; );
0000a6  e7fe              B        |L8.166|
;;;586    }
;;;587    
                          ENDP

                  |L8.168|
0000a8  4c6f674d          DCB      "LogMsg1s",0
0000ac  73673173
0000b0  00      
0000b1  00                DCB      0
0000b2  00                DCB      0
0000b3  00                DCB      0
                  |L8.180|
                          DCD      vTaskLogMsg1s
                  |L8.184|
0000b8  4c6f674d          DCB      "LogMsg5s",0
0000bc  73673573
0000c0  00      
0000c1  00                DCB      0
0000c2  00                DCB      0
0000c3  00                DCB      0
                  |L8.196|
                          DCD      vTaskLogMsg5s
                  |L8.200|
0000c8  4c6f674d          DCB      "LogMsg500ms",0
0000cc  73673530
0000d0  306d7300
                  |L8.212|
                          DCD      vTaskLogMsg500ms
                  |L8.216|
0000d8  76546173          DCB      "vTaskRising",0
0000dc  6b526973
0000e0  696e6700
                  |L8.228|
                          DCD      vTaskRisingFlag
                  |L8.232|
0000e8  76546173          DCB      "vTaskCreate",0
0000ec  6b437265
0000f0  61746500
                  |L8.244|
                          DCD      vTaskCreateTask
                  |L8.248|
0000f8  76546173          DCB      "vTaskSend",0
0000fc  6b53656e
000100  6400    
000102  00                DCB      0
000103  00                DCB      0
                  |L8.260|
                          DCD      vTaskSendPacket
                  |L8.264|
000108  76546173          DCB      "vTaskRecv",0
00010c  6b526563
000110  7600    
000112  00                DCB      0
000113  00                DCB      0
                  |L8.276|
                          DCD      vTaskRecvPacket
                  |L8.280|
000118  76546173          DCB      "vTaskTasklist",0
00011c  6b546173
000120  6b6c6973
000124  7400    
000126  00                DCB      0
000127  00                DCB      0
                  |L8.296|
                          DCD      vTaskTasklist
                  |L8.300|
00012c  76546173          DCB      "vTaskBitFlag",0
000130  6b426974
000134  466c6167
000138  00      
000139  00                DCB      0
00013a  00                DCB      0
00013b  00                DCB      0
                  |L8.316|
                          DCD      vTaskBitFlagSwitch

                          AREA ||i.vApplicationIdleHook||, CODE, READONLY, ALIGN=1

                  vApplicationIdleHook PROC
;;;430    
;;;431    __weak void vApplicationIdleHook(void)
000000  4770              BX       lr
;;;432    {
;;;433    
;;;434    }
;;;435    
                          ENDP


                          AREA ||i.vApplicationMallocFailedHook||, CODE, READONLY, ALIGN=1

                  vApplicationMallocFailedHook PROC
;;;440    
;;;441    __weak void vApplicationMallocFailedHook( void )
000000  b672              CPSID    i
                  |L10.2|
;;;442    {
;;;443    	/* vApplicationMallocFailedHook() will only be called if
;;;444    	configUSE_MALLOC_FAILED_HOOK is set to 1 in FreeRTOSConfig.h.  It is a hook
;;;445    	function that will get called if a call to pvPortMalloc() fails.
;;;446    	pvPortMalloc() is called internally by the kernel whenever a task, queue,
;;;447    	timer or semaphore is created.  It is also called by various parts of the
;;;448    	demo application.  If heap_1.c or heap_2.c are used, then the size of the
;;;449    	heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
;;;450    	FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
;;;451    	to query the size of free heap space that remains (although it does not
;;;452    	provide information on how the remaining heap might be fragmented). */
;;;453    	taskDISABLE_INTERRUPTS();
;;;454    	for( ;; );
000002  e7fe              B        |L10.2|
;;;455    }
;;;456    
                          ENDP


                          AREA ||i.vApplicationStackOverflowHook||, CODE, READONLY, ALIGN=1

                  vApplicationStackOverflowHook PROC
;;;456    
;;;457    __weak void vApplicationStackOverflowHook( TaskHandle_t pxTask, char *pcTaskName )
000000  b672              CPSID    i
                  |L11.2|
;;;458    {
;;;459    	( void ) pcTaskName;
;;;460    	( void ) pxTask;
;;;461    
;;;462    	/* Run time stack overflow checking is performed if
;;;463    	configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
;;;464    	function is called if a stack overflow is detected. */
;;;465    	taskDISABLE_INTERRUPTS();
;;;466    	for( ;; );
000002  e7fe              B        |L11.2|
;;;467    }
;;;468    
                          ENDP


                          AREA ||i.vApplicationTickHook||, CODE, READONLY, ALIGN=1

                  vApplicationTickHook PROC
;;;435    
;;;436    __weak void vApplicationTickHook( void )
000000  4770              BX       lr
;;;437    {
;;;438    
;;;439    }
;;;440    
                          ENDP


                          AREA ||i.vTaskBitFlagSwitch||, CODE, READONLY, ALIGN=2

                  vTaskBitFlagSwitch PROC
;;;174    
;;;175    void vTaskBitFlagSwitch( void * pvParameters )
000000  b508              PUSH     {r3,lr}
;;;176    {
;;;177    	static uint8_t OnOff = 0;
;;;178    	uint32_t millisec = DELAY_MS_1000;	
000002  247d              MOVS     r4,#0x7d
000004  00e4              LSLS     r4,r4,#3
;;;179    	portTickType xLastWakeTime;
;;;180    //	Initialise the xLastWakeTime variable with the current time.
;;;181    	xLastWakeTime = xTaskGetTickCount();
000006  f7fffffe          BL       xTaskGetTickCount
;;;182    
;;;183    	(void) pvParameters;
;;;184    	for( ;; )
;;;185    	{
;;;186    		// Wait for the next cycle.
;;;187    		vTaskDelayUntil( &xLastWakeTime, ( millisec *configTICK_RATE_HZ / ( ( TickType_t ) 1000 ) ));
00000a  9000              STR      r0,[sp,#0]
00000c  4620              MOV      r0,r4
00000e  4360              MULS     r0,r4,r0
000010  4621              MOV      r1,r4
000012  f7fffffe          BL       __aeabi_uidivmod
;;;188    
;;;189    		// Perform action here.	
;;;190    		OnOff = (OnOff&1)?(0):(1);
000016  4c07              LDR      r4,|L13.52|
000018  4605              MOV      r5,r0                 ;187
                  |L13.26|
00001a  4629              MOV      r1,r5                 ;187
00001c  4668              MOV      r0,sp                 ;187
00001e  f7fffffe          BL       vTaskDelayUntil
000022  78a0              LDRB     r0,[r4,#2]  ; OnOff
000024  07c0              LSLS     r0,r0,#31
000026  17c0              ASRS     r0,r0,#31
000028  1c40              ADDS     r0,r0,#1
00002a  70a0              STRB     r0,[r4,#2]
;;;191    		BitFlag_SwitchTest(OnOff);		
00002c  f7fffffe          BL       BitFlag_SwitchTest
000030  e7f3              B        |L13.26|
;;;192    		
;;;193    		#if defined (DEBUG_BIT_FLAG)
;;;194    		printf("\r\n\r\n>>>>BitFlagSwitch (0x%2X)!\r\n",BitFlag);
;;;195    		printf("0x%2X\r\n",BitFlag_READ(ReadBit(BitFlag_AAA)));		
;;;196    		printf("0x%2X\r\n",BitFlag_READ(ReadBit(BitFlag_BBB)));
;;;197    		printf("0x%2X\r\n",BitFlag_READ(ReadBit(BitFlag_CCC)));	
;;;198    		printf("0x%2X\r\n",BitFlag_READ(ReadBit(BitFlag_DDD)));	
;;;199    		printf("0x%2X\r\n\r\n\r\n",BitFlag_READ(ReadBit(BitFlag_EEE)));	
;;;200    		#endif	/*DEBUG_13_PWM_MODULATION*/	
;;;201    	}  
;;;202    }
;;;203    
                          ENDP

000032  0000              DCW      0x0000
                  |L13.52|
                          DCD      ||.data||

                          AREA ||i.vTaskCreateSubTask||, CODE, READONLY, ALIGN=2

                  vTaskCreateSubTask PROC
;;;311    
;;;312    void vTaskCreateSubTask(void * pvParameters)
000000  4c03              LDR      r4,|L14.16|
;;;313    {
000002  2500              MOVS     r5,#0
                  |L14.4|
;;;314    	(void) pvParameters;
;;;315    	for( ;; )
;;;316    	{
;;;317    		#if defined (DEBUG_CREATE_TASK)
;;;318    		printf(">>>>TaskSub Delete\r\n");
;;;319    		#endif /*DEBUG_CREATE_TASK*/
;;;320    		
;;;321    		Flag_Func = 0 ;
000004  7025              STRB     r5,[r4,#0]
;;;322    
;;;323    		/* Delete the Init Thread */ 
;;;324    		vTaskDelete(xTaskCreateSub);
000006  6920              LDR      r0,[r4,#0x10]  ; xTaskCreateSub
000008  f7fffffe          BL       vTaskDelete
00000c  e7fa              B        |L14.4|
;;;325    	}	
;;;326    }
;;;327    
                          ENDP

00000e  0000              DCW      0x0000
                  |L14.16|
                          DCD      ||.data||

                          AREA ||i.vTaskCreateTask||, CODE, READONLY, ALIGN=2

                  vTaskCreateTask PROC
;;;327    
;;;328    void vTaskCreateTask( void * pvParameters )
000000  b51c              PUSH     {r2-r4,lr}
;;;329    {
;;;330    	(void) pvParameters;	
;;;331    	for( ;; )
;;;332    	{		
;;;333    		if (Flag_Func)
000002  4e08              LDR      r6,|L15.36|
;;;334    		{
;;;335    			// Perform action here.			
;;;336    			xTaskCreate(vTaskCreateSubTask, "vTaskSub", configMINIMAL_STACK_SIZE/2, NULL, mainABOVENORMAL_TASK_PRIORITY, &xTaskCreateSub ); 
000004  4634              MOV      r4,r6
000006  3410              ADDS     r4,r4,#0x10
000008  2501              MOVS     r5,#1
                  |L15.10|
00000a  7830              LDRB     r0,[r6,#0]            ;333  ; Flag_Func
00000c  2800              CMP      r0,#0                 ;333
00000e  d0fc              BEQ      |L15.10|
000010  2300              MOVS     r3,#0
000012  2240              MOVS     r2,#0x40
000014  a104              ADR      r1,|L15.40|
000016  4807              LDR      r0,|L15.52|
000018  9500              STR      r5,[sp,#0]
00001a  9401              STR      r4,[sp,#4]
00001c  f7fffffe          BL       xTaskCreate
000020  e7f3              B        |L15.10|
;;;337    			
;;;338    			#if defined (DEBUG_CREATE_TASK)
;;;339    			printf(">>>>TaskSub Create\r\n");		
;;;340    			#endif /*DEBUG_CREATE_TASK*/
;;;341    		}
;;;342    	}  
;;;343    }
;;;344    
                          ENDP

000022  0000              DCW      0x0000
                  |L15.36|
                          DCD      ||.data||
                  |L15.40|
000028  76546173          DCB      "vTaskSub",0
00002c  6b537562
000030  00      
000031  00                DCB      0
000032  00                DCB      0
000033  00                DCB      0
                  |L15.52|
                          DCD      vTaskCreateSubTask

                          AREA ||i.vTaskLogMsg1s||, CODE, READONLY, ALIGN=2

                  vTaskLogMsg1s PROC
;;;408    
;;;409    void vTaskLogMsg1s( void *pvParameters )
000000  b508              PUSH     {r3,lr}
;;;410    {	
;;;411    	static uint32_t Cnt_LogMsg = 0;
;;;412    	uint32_t millisec = 1000;
000002  247d              MOVS     r4,#0x7d
000004  00e4              LSLS     r4,r4,#3
;;;413    
;;;414    	portTickType xLastWakeTime;
;;;415    	xLastWakeTime = xTaskGetTickCount();
000006  f7fffffe          BL       xTaskGetTickCount
;;;416    
;;;417    	GPIO_SetMode(PB, BIT14, GPIO_MODE_OUTPUT);
00000a  2201              MOVS     r2,#1
00000c  9000              STR      r0,[sp,#0]
00000e  0391              LSLS     r1,r2,#14
000010  4809              LDR      r0,|L16.56|
000012  f7fffffe          BL       GPIO_SetMode
;;;418    
;;;419    	(void) pvParameters;
;;;420    	for( ;; )
;;;421    	{
;;;422            vTaskDelayUntil( &xLastWakeTime, ( millisec *configTICK_RATE_HZ / ( ( TickType_t ) 1000 ) ));
000016  4620              MOV      r0,r4
000018  2501              MOVS     r5,#1                 ;417
00001a  4360              MULS     r0,r4,r0
00001c  4621              MOV      r1,r4
00001e  f7fffffe          BL       __aeabi_uidivmod
;;;423    		PB14 ^= 1;
000022  4c06              LDR      r4,|L16.60|
000024  4606              MOV      r6,r0                 ;422
                  |L16.38|
000026  4631              MOV      r1,r6                 ;422
000028  4668              MOV      r0,sp                 ;422
00002a  f7fffffe          BL       vTaskDelayUntil
00002e  6ba0              LDR      r0,[r4,#0x38]
000030  4068              EORS     r0,r0,r5
000032  63a0              STR      r0,[r4,#0x38]
000034  e7f7              B        |L16.38|
;;;424    
;;;425    		#if defined (DEBUG_LOG_MSG_1s)
;;;426    		printf("vTaskLogMsg1s:Log(%4dms):%4d (%4d bytes)\r\n" ,millisec ,++Cnt_LogMsg,xPortGetFreeHeapSize());
;;;427    		#endif
;;;428    	}  
;;;429    }
;;;430    
                          ENDP

000036  0000              DCW      0x0000
                  |L16.56|
                          DCD      0x40004040
                  |L16.60|
                          DCD      0x40004840

                          AREA ||i.vTaskLogMsg500ms||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  vTaskLogMsg500ms PROC
;;;370    
;;;371    void vTaskLogMsg500ms( void *pvParameters )
000000  b51c              PUSH     {r2-r4,lr}
;;;372    {	
;;;373    	static uint32_t Cnt_LogMsg = 0;
;;;374    	uint32_t millisec = 500;
000002  24ff              MOVS     r4,#0xff
000004  34f5              ADDS     r4,r4,#0xf5
;;;375    
;;;376    	portTickType xLastWakeTime;
;;;377    	xLastWakeTime = xTaskGetTickCount();
000006  f7fffffe          BL       xTaskGetTickCount
;;;378    
;;;379    	(void) pvParameters;
;;;380    	for( ;; )
;;;381    	{
;;;382            vTaskDelayUntil( &xLastWakeTime, ( millisec *configTICK_RATE_HZ / ( ( TickType_t ) 1000 ) ));
00000a  9001              STR      r0,[sp,#4]
00000c  0060              LSLS     r0,r4,#1
00000e  4360              MULS     r0,r4,r0
000010  0061              LSLS     r1,r4,#1
000012  f7fffffe          BL       __aeabi_uidivmod
;;;383    
;;;384    		#if defined (DEBUG_LOG_MSG_500ms)
;;;385    		printf("vTaskLogMsg500ms:Log(%4dms):%4d (%4d bytes , CPU : %d )\r\n" ,millisec ,++Cnt_LogMsg,xPortGetFreeHeapSize(),osGetCPUUsage());
000016  4d0e              LDR      r5,|L17.80|
000018  4606              MOV      r6,r0                 ;382
                  |L17.26|
00001a  4631              MOV      r1,r6                 ;382
00001c  a801              ADD      r0,sp,#4              ;382
00001e  f7fffffe          BL       vTaskDelayUntil
000022  f7fffffe          BL       vTaskSuspendAll
000026  f7fffffe          BL       osGetCPUUsage
00002a  4607              MOV      r7,r0
00002c  f7fffffe          BL       xPortGetFreeHeapSize
000030  9700              STR      r7,[sp,#0]
000032  68ea              LDR      r2,[r5,#0xc]  ; Cnt_LogMsg
000034  4603              MOV      r3,r0
000036  1c52              ADDS     r2,r2,#1
000038  4621              MOV      r1,r4
00003a  a006              ADR      r0,|L17.84|
00003c  60ea              STR      r2,[r5,#0xc]  ; Cnt_LogMsg
00003e  f7fffffe          BL       __2printf
000042  4813              LDR      r0,|L17.144|
000044  f7fffffe          BL       fflush
000048  f7fffffe          BL       xTaskResumeAll
00004c  e7e5              B        |L17.26|
;;;386    		#endif
;;;387    	}  
;;;388    }
;;;389    
                          ENDP

00004e  0000              DCW      0x0000
                  |L17.80|
                          DCD      ||.data||
                  |L17.84|
000054  76546173          DCB      "vTaskLogMsg500ms:Log(%4dms):%4d (%4d bytes , CPU : %d )"
000058  6b4c6f67
00005c  4d736735
000060  30306d73
000064  3a4c6f67
000068  28253464
00006c  6d73293a
000070  25346420
000074  28253464
000078  20627974
00007c  6573202c
000080  20435055
000084  203a2025
000088  642029  
00008b  0d0a00            DCB      "\r\n",0
00008e  00                DCB      0
00008f  00                DCB      0
                  |L17.144|
                          DCD      __stdout

                          AREA ||i.vTaskLogMsg5s||, CODE, READONLY, ALIGN=2

                  vTaskLogMsg5s PROC
;;;389    
;;;390    void vTaskLogMsg5s( void *pvParameters )
000000  b508              PUSH     {r3,lr}
;;;391    {	
;;;392    	static uint32_t Cnt_LogMsg = 0;
;;;393    	uint32_t millisec = 5000;
000002  4c08              LDR      r4,|L18.36|
;;;394    
;;;395    	portTickType xLastWakeTime;
;;;396    	xLastWakeTime = xTaskGetTickCount();
000004  f7fffffe          BL       xTaskGetTickCount
;;;397    
;;;398    	(void) pvParameters;
;;;399    	for( ;; )
;;;400    	{
;;;401            vTaskDelayUntil( &xLastWakeTime, ( millisec *configTICK_RATE_HZ / ( ( TickType_t ) 1000 ) ));
000008  9000              STR      r0,[sp,#0]
00000a  207d              MOVS     r0,#0x7d
00000c  00c0              LSLS     r0,r0,#3
00000e  217d              MOVS     r1,#0x7d
000010  4360              MULS     r0,r4,r0
000012  00c9              LSLS     r1,r1,#3
000014  f7fffffe          BL       __aeabi_uidivmod
000018  4604              MOV      r4,r0
                  |L18.26|
00001a  4621              MOV      r1,r4
00001c  4668              MOV      r0,sp
00001e  f7fffffe          BL       vTaskDelayUntil
000022  e7fa              B        |L18.26|
;;;402    
;;;403    		#if defined (DEBUG_LOG_MSG_5s)		
;;;404    		printf("vTaskLogMsg5s:Log(%4dms):%4d (%4d bytes)\r\n" ,millisec ,++Cnt_LogMsg,xPortGetFreeHeapSize());
;;;405    		#endif
;;;406    	}  
;;;407    }
;;;408    
                          ENDP

                  |L18.36|
                          DCD      0x00001388

                          AREA ||i.vTaskRecvPacket||, CODE, READONLY, ALIGN=1

                  vTaskRecvPacket PROC
;;;229    
;;;230    void vTaskRecvPacket( void * pvParameters )
000000  24ff              MOVS     r4,#0xff
;;;231    {
000002  b08a              SUB      sp,sp,#0x28
;;;232    	CommPacket lPacket;
;;;233    	
;;;234    	uint32_t millisec = DELAY_MS_100*5;	
000004  34f5              ADDS     r4,r4,#0xf5
;;;235    	portTickType xLastWakeTime;
;;;236    //	Initialise the xLastWakeTime variable with the current time.
;;;237    	xLastWakeTime = xTaskGetTickCount();
000006  f7fffffe          BL       xTaskGetTickCount
;;;238    
;;;239    	(void) pvParameters;	
;;;240    	for( ;; )
;;;241    	{
;;;242    		// Wait for the next cycle.
;;;243    		vTaskDelayUntil( &xLastWakeTime, ( millisec *configTICK_RATE_HZ / ( ( TickType_t ) 1000 ) ));
00000a  9009              STR      r0,[sp,#0x24]
00000c  0060              LSLS     r0,r4,#1
00000e  4360              MULS     r0,r4,r0
000010  0061              LSLS     r1,r4,#1
000012  f7fffffe          BL       __aeabi_uidivmod
000016  4604              MOV      r4,r0
                  |L19.24|
000018  4621              MOV      r1,r4
00001a  a809              ADD      r0,sp,#0x24
00001c  f7fffffe          BL       vTaskDelayUntil
;;;244    		
;;;245    		// Perform action here
;;;246    		RecvPacket(&lPacket,sizeof(lPacket));		
000020  2124              MOVS     r1,#0x24
000022  4668              MOV      r0,sp
000024  f7fffffe          BL       RecvPacket
000028  e7f6              B        |L19.24|
;;;247    
;;;248    		#if defined (DEBUG_RECEIVE_PACKET)
;;;249    		printf(">>>> RECEIVE_PACKET\r\n");		
;;;250    		printf("RECEIVE(A:%4d)\r\n",lPacket.structutre.Struct_A.var_a);
;;;251    		printf("RECEIVE(A:%4d)\r\n",lPacket.structutre.Struct_A.var_b);
;;;252    
;;;253    		printf("RECEIVE(B:%4d)\r\n",lPacket.structutre.Struct_B.var_a);
;;;254    		printf("RECEIVE(B:%4d)\r\n",lPacket.structutre.Struct_B.var_b);
;;;255    
;;;256    		printf("RECEIVE(C:%4d)\r\n",lPacket.structutre.Struct_C.var_a);
;;;257    		printf("RECEIVE(C:%4d)\r\n",lPacket.structutre.Struct_C.var_b);
;;;258    		printf("RECEIVE(C:%4d)\r\n",lPacket.structutre.Struct_C.var_c);	
;;;259    		printf("<<<< RECEIVE_PACKET\r\n");		
;;;260    		#endif /*DEBUG_RECEIVE_PACKET*/	
;;;261    	}  
;;;262    }
;;;263    
                          ENDP


                          AREA ||i.vTaskRisingFlag||, CODE, READONLY, ALIGN=2

                  vTaskRisingFlag PROC
;;;344    
;;;345    void vTaskRisingFlag( void * pvParameters )
000000  b508              PUSH     {r3,lr}
;;;346    {
;;;347    	uint32_t millisec = DELAY_MS_100*5;
000002  24ff              MOVS     r4,#0xff
000004  34f5              ADDS     r4,r4,#0xf5
;;;348    	static uint16_t cnt = 0;
;;;349    	
;;;350    	portTickType xLastWakeTime;
;;;351    //	Initialise the xLastWakeTime variable with the current time.
;;;352    	xLastWakeTime = xTaskGetTickCount();
000006  f7fffffe          BL       xTaskGetTickCount
;;;353    
;;;354    	(void) pvParameters;
;;;355    	for( ;; )
;;;356    	{
;;;357    		// Wait for the next cycle.
;;;358    		vTaskDelayUntil( &xLastWakeTime, ( millisec *configTICK_RATE_HZ / ( ( TickType_t ) 1000 ) ));
00000a  9000              STR      r0,[sp,#0]
00000c  0060              LSLS     r0,r4,#1
00000e  4360              MULS     r0,r4,r0
000010  0061              LSLS     r1,r4,#1
000012  f7fffffe          BL       __aeabi_uidivmod
;;;359    
;;;360    		// Perform action here.	
;;;361    		Flag_Func = 1;		
000016  4d04              LDR      r5,|L20.40|
000018  4606              MOV      r6,r0                 ;358
00001a  2401              MOVS     r4,#1
                  |L20.28|
00001c  4631              MOV      r1,r6                 ;358
00001e  4668              MOV      r0,sp                 ;358
000020  f7fffffe          BL       vTaskDelayUntil
000024  702c              STRB     r4,[r5,#0]
;;;362    
;;;363    		#if defined (DEBUG_RISING_FLAG)
;;;364    		printf(">>>>RisingFlag(%4dms) :%4d\r\n" ,millisec, ++cnt);
;;;365    		#else
;;;366    		( void ) cnt;		//Remove compiler warning about cnt being set but never used.
000026  e7f9              B        |L20.28|
;;;367    		#endif	/*DEBUG_RISING_FLAG*/		
;;;368    	}  
;;;369    }
;;;370    
                          ENDP

                  |L20.40|
                          DCD      ||.data||

                          AREA ||i.vTaskSendPacket||, CODE, READONLY, ALIGN=2

                  vTaskSendPacket PROC
;;;263    
;;;264    void vTaskSendPacket( void * pvParameters )
000000  b508              PUSH     {r3,lr}
;;;265    {
;;;266    	uint32_t millisec = DELAY_MS_100*5;
000002  24ff              MOVS     r4,#0xff
000004  34f5              ADDS     r4,r4,#0xf5
;;;267    	portTickType xLastWakeTime;
;;;268    //	Initialise the xLastWakeTime variable with the current time.
;;;269    	xLastWakeTime = xTaskGetTickCount();
000006  f7fffffe          BL       xTaskGetTickCount
;;;270    
;;;271    	(void) pvParameters;	
;;;272    	for( ;; )
;;;273    	{
;;;274    		// Wait for the next cycle.
;;;275    		vTaskDelayUntil( &xLastWakeTime, ( millisec *configTICK_RATE_HZ / ( ( TickType_t ) 1000 ) ));
00000a  9000              STR      r0,[sp,#0]
00000c  0060              LSLS     r0,r4,#1
00000e  4360              MULS     r0,r4,r0
000010  0061              LSLS     r1,r4,#1
000012  f7fffffe          BL       __aeabi_uidivmod
;;;276    		
;;;277    		// Perform action here.
;;;278    		++Cnt_Packet;
000016  4d10              LDR      r5,|L21.88|
000018  4606              MOV      r6,r0                 ;275
;;;279    
;;;280    		#if 1
;;;281    		if((Cnt_Packet%3)==0)
;;;282    		{
;;;283    			gPacket.type = Type_A;
00001a  462c              MOV      r4,r5
00001c  3414              ADDS     r4,r4,#0x14
                  |L21.30|
00001e  4631              MOV      r1,r6                 ;275
000020  4668              MOV      r0,sp                 ;275
000022  f7fffffe          BL       vTaskDelayUntil
000026  68a8              LDR      r0,[r5,#8]            ;278  ; Cnt_Packet
000028  2103              MOVS     r1,#3                 ;281
00002a  1c40              ADDS     r0,r0,#1              ;278
00002c  60a8              STR      r0,[r5,#8]            ;281  ; Cnt_Packet
00002e  f7fffffe          BL       __aeabi_uidivmod
000032  2900              CMP      r1,#0                 ;281
000034  d00b              BEQ      |L21.78|
;;;284    			SendPacket(&gPacket,sizeof(gPacket));
;;;285    
;;;286    			#if defined (DEBUG_SEND_PACKET)
;;;287    			printf(">>>> SEND_PACKET(%4d,A+1)\r\n",Cnt_Packet);
;;;288    			#endif /*DEBUG_SEND_PACKET*/
;;;289    		}
;;;290    		else if ((Cnt_Packet%3)==1)
000036  2901              CMP      r1,#1
000038  d00b              BEQ      |L21.82|
;;;291    		{
;;;292    			gPacket.type = Type_B;
;;;293    			SendPacket(&gPacket,sizeof(gPacket));	
;;;294    
;;;295    			#if defined (DEBUG_SEND_PACKET)
;;;296    			printf(">>>> SEND_PACKET (%4d,B+10)\r\n",Cnt_Packet);		
;;;297    			#endif /*DEBUG_SEND_PACKET*/
;;;298    		}
;;;299    		else if ((Cnt_Packet%3)==2)
00003a  2902              CMP      r1,#2
00003c  d1ef              BNE      |L21.30|
;;;300    		{
;;;301    			gPacket.type = Type_C;
00003e  2002              MOVS     r0,#2
                  |L21.64|
000040  7020              STRB     r0,[r4,#0]
;;;302    			SendPacket(&gPacket,sizeof(gPacket));
000042  4805              LDR      r0,|L21.88|
000044  2124              MOVS     r1,#0x24
000046  3014              ADDS     r0,r0,#0x14
000048  f7fffffe          BL       SendPacket
00004c  e7e7              B        |L21.30|
                  |L21.78|
00004e  2000              MOVS     r0,#0                 ;283
000050  e7f6              B        |L21.64|
                  |L21.82|
000052  2001              MOVS     r0,#1                 ;292
000054  e7f4              B        |L21.64|
;;;303    
;;;304    			#if defined (DEBUG_SEND_PACKET)
;;;305    			printf(">>>> SEND_PACKET(%4d,C+100)\r\n",Cnt_Packet);	
;;;306    			#endif /*DEBUG_SEND_PACKET*/
;;;307    		}
;;;308    		#endif	
;;;309    	}  
;;;310    }
;;;311    
                          ENDP

000056  0000              DCW      0x0000
                  |L21.88|
                          DCD      ||.data||

                          AREA ||i.vTaskTasklist||, CODE, READONLY, ALIGN=1

                  vTaskTasklist PROC
;;;203    
;;;204    void vTaskTasklist( void * pvParameters )
000000  b0ff              SUB      sp,sp,#0x1fc
;;;205    {
;;;206    	char buff[512];
;;;207    	
;;;208    	uint32_t millisec = DELAY_MS_1000;
000002  247d              MOVS     r4,#0x7d
000004  b083              SUB      sp,sp,#0xc            ;205
000006  00e4              LSLS     r4,r4,#3
;;;209    	portTickType xLastWakeTime;
;;;210    //	Initialise the xLastWakeTime variable with the current time.
;;;211    	xLastWakeTime = xTaskGetTickCount();
000008  f7fffffe          BL       xTaskGetTickCount
;;;212    
;;;213    	(void) pvParameters;
;;;214    	for( ;; )
;;;215    	{
;;;216    		// Wait for the next cycle.
;;;217    		vTaskDelayUntil( &xLastWakeTime, ( millisec *configTICK_RATE_HZ / ( ( TickType_t ) 1000 ) ));
00000c  9000              STR      r0,[sp,#0]
00000e  4620              MOV      r0,r4
000010  4360              MULS     r0,r4,r0
000012  4621              MOV      r1,r4
000014  f7fffffe          BL       __aeabi_uidivmod
000018  4604              MOV      r4,r0
                  |L22.26|
00001a  4621              MOV      r1,r4
00001c  4668              MOV      r0,sp
00001e  f7fffffe          BL       vTaskDelayUntil
;;;218    		
;;;219    		// Perform action here.
;;;220    		vTaskList(buff);
000022  a801              ADD      r0,sp,#4
000024  f7fffffe          BL       vTaskList
000028  e7f7              B        |L22.26|
;;;221    
;;;222    		#if defined (DEBUG_DISPLAY_TASKLIST)
;;;223    		printf("\r\n>>>>Tasklist 	State Priority Stack   Num\r\n");
;;;224    		printf("-------------------------------------------\r\n");
;;;225    		printf("%s\r\n\r\n\r\n\r\n" ,buff);	
;;;226    		#endif	/*DEBUG_DISPLAY_TASKLIST*/
;;;227    	}  
;;;228    }
;;;229    
                          ENDP


                          AREA ||.data||, DATA, ALIGN=2

                  Flag_Func
000000  00                DCB      0x00
                  BitFlag
000001  00                DCB      0x00
                  OnOff
000002  0000              DCB      0x00,0x00
                  ||CNT||
000004  0000              DCW      0x0000
000006  0000              DCB      0x00,0x00
                  Cnt_Packet
                          DCD      0x00000000
                  Cnt_LogMsg
                          DCD      0x00000000
                  xTaskCreateSub
                          DCD      0x00000000
                  gPacket
000014  03000000          DCB      0x03,0x00,0x00,0x00
                          DCD      0x00000001
                          DCD      0x00000001
                          DCD      0x00000002
                          DCD      0x00000002
                          DCD      0x00000003
                          DCD      0x00000003
                          DCD      0x00000003
000034  40400000          DCFS     0x40400000 ; 3

                          AREA ||area_number.26||, DATA, ALIGN=1

                          EXPORTAS ||area_number.26||, ||.data||
                  ||cnt||
000000  0000              DCW      0x0000

;*** Start embedded assembler ***

#line 1 "..\\main.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_8d3620ef____REV16|
#line 388 "..\\..\\..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___6_main_c_8d3620ef____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_8d3620ef____REVSH|
#line 402
|__asm___6_main_c_8d3620ef____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
