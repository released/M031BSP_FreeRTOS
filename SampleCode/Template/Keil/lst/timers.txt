; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\timers.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\timers.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\..\..\Library\CMSIS\Include -I..\..\..\Library\Device\Nuvoton\M031\Include -I..\..\..\Library\StdDriver\inc -I..\..\..\ThirdParty\FreeRTOS\Source\include -I..\..\..\ThirdParty\FreeRTOS\Demo\Common\include -I..\..\..\ThirdParty\FreeRTOS\Source\portable\RVDS\ARM_CM0 -I..\..\..\ThirdParty\FreeRTOS -I..\..\Template -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=526 --omf_browse=.\obj\timers.crf ..\..\..\ThirdParty\FreeRTOS\Source\timers.c]
                          THUMB

                          AREA ||i.pcTimerGetName||, CODE, READONLY, ALIGN=1

                  pcTimerGetName PROC
;;;472    
;;;473    const char * pcTimerGetName( TimerHandle_t xTimer ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
000000  2800              CMP      r0,#0
;;;474    {
000002  d001              BEQ      |L1.8|
;;;475    Timer_t *pxTimer = xTimer;
;;;476    
;;;477    	configASSERT( xTimer );
;;;478    	return pxTimer->pcTimerName;
000004  6800              LDR      r0,[r0,#0]
;;;479    }
000006  4770              BX       lr
                  |L1.8|
000008  b672              CPSID    i                     ;477
                  |L1.10|
00000a  e7fe              B        |L1.10|
;;;480    /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.prvCheckForValidListAndQueue||, CODE, READONLY, ALIGN=2

                  prvCheckForValidListAndQueue PROC
;;;915    
;;;916    static void prvCheckForValidListAndQueue( void )
000000  b510              PUSH     {r4,lr}
;;;917    {
;;;918    	/* Check that the list from which active timers are referenced, and the
;;;919    	queue used to communicate with the timer service, have been
;;;920    	initialised. */
;;;921    	taskENTER_CRITICAL();
000002  f7fffffe          BL       vPortEnterCritical
;;;922    	{
;;;923    		if( xTimerQueue == NULL )
000006  4c0e              LDR      r4,|L2.64|
000008  6820              LDR      r0,[r4,#0]  ; xTimerQueue
00000a  2800              CMP      r0,#0
00000c  d115              BNE      |L2.58|
;;;924    		{
;;;925    			vListInitialise( &xActiveTimerList1 );
00000e  480d              LDR      r0,|L2.68|
000010  f7fffffe          BL       vListInitialise
;;;926    			vListInitialise( &xActiveTimerList2 );
000014  480b              LDR      r0,|L2.68|
000016  3014              ADDS     r0,r0,#0x14
000018  f7fffffe          BL       vListInitialise
;;;927    			pxCurrentTimerList = &xActiveTimerList1;
00001c  4809              LDR      r0,|L2.68|
;;;928    			pxOverflowTimerList = &xActiveTimerList2;
00001e  60e0              STR      r0,[r4,#0xc]  ; pxCurrentTimerList
000020  3014              ADDS     r0,r0,#0x14
;;;929    
;;;930    			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
;;;931    			{
;;;932    				/* The timer queue is allocated statically in case
;;;933    				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
;;;934    				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
;;;935    				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
;;;936    
;;;937    				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
;;;938    			}
;;;939    			#else
;;;940    			{
;;;941    				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
000022  6120              STR      r0,[r4,#0x10]  ; pxOverflowTimerList
000024  2200              MOVS     r2,#0
000026  210c              MOVS     r1,#0xc
000028  200a              MOVS     r0,#0xa
00002a  f7fffffe          BL       xQueueGenericCreate
;;;942    			}
;;;943    			#endif
;;;944    
;;;945    			#if ( configQUEUE_REGISTRY_SIZE > 0 )
;;;946    			{
;;;947    				if( xTimerQueue != NULL )
00002e  6020              STR      r0,[r4,#0]  ; xTimerQueue
000030  2800              CMP      r0,#0
000032  d002              BEQ      |L2.58|
;;;948    				{
;;;949    					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
000034  a104              ADR      r1,|L2.72|
000036  f7fffffe          BL       vQueueAddToRegistry
                  |L2.58|
;;;950    				}
;;;951    				else
;;;952    				{
;;;953    					mtCOVERAGE_TEST_MARKER();
;;;954    				}
;;;955    			}
;;;956    			#endif /* configQUEUE_REGISTRY_SIZE */
;;;957    		}
;;;958    		else
;;;959    		{
;;;960    			mtCOVERAGE_TEST_MARKER();
;;;961    		}
;;;962    	}
;;;963    	taskEXIT_CRITICAL();
00003a  f7fffffe          BL       vPortExitCritical
;;;964    }
00003e  bd10              POP      {r4,pc}
;;;965    /*-----------------------------------------------------------*/
                          ENDP

                  |L2.64|
                          DCD      ||.data||
                  |L2.68|
                          DCD      ||.bss||
                  |L2.72|
000048  546d7251          DCB      "TmrQ",0
00004c  00      
00004d  00                DCB      0
00004e  00                DCB      0
00004f  00                DCB      0

                          AREA ||i.prvInsertTimerInActiveList||, CODE, READONLY, ALIGN=2

                  prvInsertTimerInActiveList PROC
;;;667    
;;;668    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
000000  b570              PUSH     {r4-r6,lr}
;;;669    {
;;;670    BaseType_t xProcessTimerNow = pdFALSE;
000002  2400              MOVS     r4,#0
;;;671    
;;;672    	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
;;;673    	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
000004  6041              STR      r1,[r0,#4]
;;;674    
;;;675    	if( xNextExpiryTime <= xTimeNow )
;;;676    	{
;;;677    		/* Has the expiry time elapsed between the command to start/reset a
;;;678    		timer was issued, and the time the command was processed? */
;;;679    		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
;;;680    		{
;;;681    			/* The time between a command being issued and the command being
;;;682    			processed actually exceeds the timers period.  */
;;;683    			xProcessTimerNow = pdTRUE;
;;;684    		}
;;;685    		else
;;;686    		{
;;;687    			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
000006  4d0b              LDR      r5,|L3.52|
000008  6100              STR      r0,[r0,#0x10]         ;673
00000a  4291              CMP      r1,r2                 ;675
00000c  d806              BHI      |L3.28|
00000e  1ad1              SUBS     r1,r2,r3              ;679
000010  6982              LDR      r2,[r0,#0x18]         ;679
000012  4291              CMP      r1,r2                 ;679
000014  d206              BCS      |L3.36|
000016  1d01              ADDS     r1,r0,#4
000018  6928              LDR      r0,[r5,#0x10]  ; pxOverflowTimerList
00001a  e007              B        |L3.44|
                  |L3.28|
;;;688    		}
;;;689    	}
;;;690    	else
;;;691    	{
;;;692    		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
00001c  429a              CMP      r2,r3
00001e  d203              BCS      |L3.40|
000020  4299              CMP      r1,r3
000022  d301              BCC      |L3.40|
                  |L3.36|
;;;693    		{
;;;694    			/* If, since the command was issued, the tick count has overflowed
;;;695    			but the expiry time has not, then the timer must have already passed
;;;696    			its expiry time and should be processed immediately. */
;;;697    			xProcessTimerNow = pdTRUE;
000024  2401              MOVS     r4,#1
000026  e003              B        |L3.48|
                  |L3.40|
;;;698    		}
;;;699    		else
;;;700    		{
;;;701    			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
000028  1d01              ADDS     r1,r0,#4
00002a  68e8              LDR      r0,[r5,#0xc]  ; pxCurrentTimerList
                  |L3.44|
00002c  f7fffffe          BL       vListInsert
                  |L3.48|
;;;702    		}
;;;703    	}
;;;704    
;;;705    	return xProcessTimerNow;
000030  4620              MOV      r0,r4
;;;706    }
000032  bd70              POP      {r4-r6,pc}
;;;707    /*-----------------------------------------------------------*/
                          ENDP

                  |L3.52|
                          DCD      ||.data||

                          AREA ||i.prvProcessReceivedCommands||, CODE, READONLY, ALIGN=2

                  prvProcessReceivedCommands PROC
;;;708    
;;;709    static void	prvProcessReceivedCommands( void )
000000  b5f0              PUSH     {r4-r7,lr}
;;;710    {
000002  b085              SUB      sp,sp,#0x14
;;;711    DaemonTaskMessage_t xMessage;
;;;712    Timer_t *pxTimer;
;;;713    BaseType_t xTimerListsWereSwitched, xResult;
;;;714    TickType_t xTimeNow;
;;;715    
;;;716    	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
;;;717    	{
;;;718    		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
;;;719    		{
;;;720    			/* Negative commands are pended function calls rather than timer
;;;721    			commands. */
;;;722    			if( xMessage.xMessageID < ( BaseType_t ) 0 )
;;;723    			{
;;;724    				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
;;;725    
;;;726    				/* The timer uses the xCallbackParameters member to request a
;;;727    				callback be executed.  Check the callback is not NULL. */
;;;728    				configASSERT( pxCallback );
;;;729    
;;;730    				/* Call the function. */
;;;731    				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
;;;732    			}
;;;733    			else
;;;734    			{
;;;735    				mtCOVERAGE_TEST_MARKER();
;;;736    			}
;;;737    		}
;;;738    		#endif /* INCLUDE_xTimerPendFunctionCall */
;;;739    
;;;740    		/* Commands that are positive are timer commands rather than pended
;;;741    		function calls. */
;;;742    		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
;;;743    		{
;;;744    			/* The messages uses the xTimerParameters member to work on a
;;;745    			software timer. */
;;;746    			pxTimer = xMessage.u.xTimerParameters.pxTimer;
;;;747    
;;;748    			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
;;;749    			{
;;;750    				/* The timer is in a list, remove it. */
;;;751    				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
;;;752    			}
;;;753    			else
;;;754    			{
;;;755    				mtCOVERAGE_TEST_MARKER();
;;;756    			}
;;;757    
;;;758    			traceTIMER_COMMAND_RECEIVED( pxTimer, xMessage.xMessageID, xMessage.u.xTimerParameters.xMessageValue );
;;;759    
;;;760    			/* In this case the xTimerListsWereSwitched parameter is not used, but
;;;761    			it must be present in the function call.  prvSampleTimeNow() must be
;;;762    			called after the message is received from xTimerQueue so there is no
;;;763    			possibility of a higher priority task adding a message to the message
;;;764    			queue with a time that is ahead of the timer daemon task (because it
;;;765    			pre-empted the timer daemon task after the xTimeNow value was set). */
;;;766    			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
;;;767    
;;;768    			switch( xMessage.xMessageID )
;;;769    			{
;;;770    				case tmrCOMMAND_START :
;;;771    				case tmrCOMMAND_START_FROM_ISR :
;;;772    				case tmrCOMMAND_RESET :
;;;773    				case tmrCOMMAND_RESET_FROM_ISR :
;;;774    				case tmrCOMMAND_START_DONT_TRACE :
;;;775    					/* Start or restart a timer. */
;;;776    					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
000004  2501              MOVS     r5,#1
000006  4e34              LDR      r6,|L4.216|
000008  e05c              B        |L4.196|
                  |L4.10|
00000a  9801              LDR      r0,[sp,#4]            ;742
00000c  2800              CMP      r0,#0                 ;742
00000e  db59              BLT      |L4.196|
000010  9c03              LDR      r4,[sp,#0xc]          ;748
000012  6960              LDR      r0,[r4,#0x14]         ;748
000014  2800              CMP      r0,#0                 ;748
000016  d002              BEQ      |L4.30|
000018  1d20              ADDS     r0,r4,#4              ;748
00001a  f7fffffe          BL       uxListRemove
                  |L4.30|
00001e  a804              ADD      r0,sp,#0x10           ;766
000020  f7fffffe          BL       prvSampleTimeNow
000024  4602              MOV      r2,r0                 ;766
000026  9801              LDR      r0,[sp,#4]            ;768
000028  0003              MOVS     r3,r0                 ;768
00002a  f7fffffe          BL       __ARM_common_switch8
00002e  0a06              DCB      0x0a,0x06
000030  0606282e          DCB      0x06,0x06,0x28,0x2e
000034  3f060628          DCB      0x3f,0x06,0x06,0x28
000038  2e4b              DCB      0x2e,0x4b
00003a  4627              MOV      r7,r4
00003c  3720              ADDS     r7,r7,#0x20
00003e  7a38              LDRB     r0,[r7,#8]
000040  4328              ORRS     r0,r0,r5
000042  7238              STRB     r0,[r7,#8]
;;;777    					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
000044  9802              LDR      r0,[sp,#8]
000046  69a1              LDR      r1,[r4,#0x18]
000048  4603              MOV      r3,r0
00004a  1841              ADDS     r1,r0,r1
00004c  4620              MOV      r0,r4
00004e  f7fffffe          BL       prvInsertTimerInActiveList
000052  2800              CMP      r0,#0
000054  d036              BEQ      |L4.196|
;;;778    					{
;;;779    						/* The timer expired before it was added to the active
;;;780    						timer list.  Process it now. */
;;;781    						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
000056  6a21              LDR      r1,[r4,#0x20]
000058  4620              MOV      r0,r4
00005a  4788              BLX      r1
;;;782    						traceTIMER_EXPIRED( pxTimer );
;;;783    
;;;784    						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
00005c  7a38              LDRB     r0,[r7,#8]
00005e  0740              LSLS     r0,r0,#29
000060  d530              BPL      |L4.196|
;;;785    						{
;;;786    							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
000062  2000              MOVS     r0,#0
000064  9000              STR      r0,[sp,#0]
000066  9802              LDR      r0,[sp,#8]
000068  69a1              LDR      r1,[r4,#0x18]
00006a  2300              MOVS     r3,#0
00006c  1842              ADDS     r2,r0,r1
00006e  4619              MOV      r1,r3
000070  4620              MOV      r0,r4
000072  f7fffffe          BL       xTimerGenericCommand
;;;787    							configASSERT( xResult );
000076  2800              CMP      r0,#0
000078  d124              BNE      |L4.196|
00007a  b672              CPSID    i
                  |L4.124|
00007c  e7fe              B        |L4.124|
00007e  3420              ADDS     r4,r4,#0x20
;;;788    							( void ) xResult;
;;;789    						}
;;;790    						else
;;;791    						{
;;;792    							mtCOVERAGE_TEST_MARKER();
;;;793    						}
;;;794    					}
;;;795    					else
;;;796    					{
;;;797    						mtCOVERAGE_TEST_MARKER();
;;;798    					}
;;;799    					break;
;;;800    
;;;801    				case tmrCOMMAND_STOP :
;;;802    				case tmrCOMMAND_STOP_FROM_ISR :
;;;803    					/* The timer has already been removed from the active list. */
;;;804    					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
000080  7a20              LDRB     r0,[r4,#8]
000082  0840              LSRS     r0,r0,#1
000084  0040              LSLS     r0,r0,#1
000086  7220              STRB     r0,[r4,#8]
;;;805    					break;
000088  e01c              B        |L4.196|
;;;806    
;;;807    				case tmrCOMMAND_CHANGE_PERIOD :
;;;808    				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
;;;809    					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
00008a  4620              MOV      r0,r4
00008c  3020              ADDS     r0,r0,#0x20
00008e  7a01              LDRB     r1,[r0,#8]
000090  4329              ORRS     r1,r1,r5
000092  7201              STRB     r1,[r0,#8]
;;;810    					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
000094  9802              LDR      r0,[sp,#8]
;;;811    					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
000096  61a0              STR      r0,[r4,#0x18]
000098  2800              CMP      r0,#0
00009a  d005              BEQ      |L4.168|
;;;812    
;;;813    					/* The new period does not really have a reference, and can
;;;814    					be longer or shorter than the old one.  The command time is
;;;815    					therefore set to the current time, and as the period cannot
;;;816    					be zero the next expiry time can only be in the future,
;;;817    					meaning (unlike for the xTimerStart() case above) there is
;;;818    					no fail case that needs to be handled here. */
;;;819    					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
00009c  1881              ADDS     r1,r0,r2
00009e  4613              MOV      r3,r2
0000a0  4620              MOV      r0,r4
0000a2  f7fffffe          BL       prvInsertTimerInActiveList
;;;820    					break;
0000a6  e00d              B        |L4.196|
                  |L4.168|
0000a8  b672              CPSID    i                     ;811
                  |L4.170|
0000aa  e7fe              B        |L4.170|
;;;821    
;;;822    				case tmrCOMMAND_DELETE :
;;;823    					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
;;;824    					{
;;;825    						/* The timer has already been removed from the active list,
;;;826    						just free up the memory if the memory was dynamically
;;;827    						allocated. */
;;;828    						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
0000ac  4621              MOV      r1,r4
0000ae  3120              ADDS     r1,r1,#0x20
0000b0  7a08              LDRB     r0,[r1,#8]
0000b2  0782              LSLS     r2,r0,#30
0000b4  d403              BMI      |L4.190|
;;;829    						{
;;;830    							vPortFree( pxTimer );
0000b6  4620              MOV      r0,r4
0000b8  f7fffffe          BL       vPortFree
0000bc  e002              B        |L4.196|
                  |L4.190|
;;;831    						}
;;;832    						else
;;;833    						{
;;;834    							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
0000be  0840              LSRS     r0,r0,#1
0000c0  0040              LSLS     r0,r0,#1
0000c2  7208              STRB     r0,[r1,#8]
                  |L4.196|
0000c4  2200              MOVS     r2,#0                 ;716
0000c6  a901              ADD      r1,sp,#4              ;716
0000c8  6830              LDR      r0,[r6,#0]            ;716  ; xTimerQueue
0000ca  f7fffffe          BL       xQueueReceive
0000ce  2800              CMP      r0,#0                 ;716
0000d0  d19b              BNE      |L4.10|
;;;835    						}
;;;836    					}
;;;837    					#else
;;;838    					{
;;;839    						/* If dynamic allocation is not enabled, the memory
;;;840    						could not have been dynamically allocated. So there is
;;;841    						no need to free the memory - just mark the timer as
;;;842    						"not active". */
;;;843    						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
;;;844    					}
;;;845    					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
;;;846    					break;
;;;847    
;;;848    				default	:
;;;849    					/* Don't expect to get here. */
;;;850    					break;
;;;851    			}
;;;852    		}
;;;853    	}
;;;854    }
0000d2  b005              ADD      sp,sp,#0x14
0000d4  bdf0              POP      {r4-r7,pc}
;;;855    /*-----------------------------------------------------------*/
                          ENDP

0000d6  0000              DCW      0x0000
                  |L4.216|
                          DCD      ||.data||

                          AREA ||i.prvProcessTimerOrBlockTask||, CODE, READONLY, ALIGN=2

                  prvProcessTimerOrBlockTask PROC
;;;558    
;;;559    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
000000  b5fe              PUSH     {r1-r7,lr}
;;;560    {
000002  460f              MOV      r7,r1
000004  4605              MOV      r5,r0
;;;561    TickType_t xTimeNow;
;;;562    BaseType_t xTimerListsWereSwitched;
;;;563    
;;;564    	vTaskSuspendAll();
000006  f7fffffe          BL       vTaskSuspendAll
;;;565    	{
;;;566    		/* Obtain the time now to make an assessment as to whether the timer
;;;567    		has expired or not.  If obtaining the time causes the lists to switch
;;;568    		then don't process this timer as any timers that remained in the list
;;;569    		when the lists were switched will have been processed within the
;;;570    		prvSampleTimeNow() function. */
;;;571    		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
00000a  a801              ADD      r0,sp,#4
00000c  f7fffffe          BL       prvSampleTimeNow
000010  4604              MOV      r4,r0
;;;572    		if( xTimerListsWereSwitched == pdFALSE )
000012  9801              LDR      r0,[sp,#4]
000014  2800              CMP      r0,#0
000016  d002              BEQ      |L5.30|
;;;573    		{
;;;574    			/* The tick count has not overflowed, has the timer expired? */
;;;575    			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
;;;576    			{
;;;577    				( void ) xTaskResumeAll();
;;;578    				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
;;;579    			}
;;;580    			else
;;;581    			{
;;;582    				/* The tick count has not overflowed, and the next expire
;;;583    				time has not been reached yet.  This task should therefore
;;;584    				block to wait for the next expire time or a command to be
;;;585    				received - whichever comes first.  The following line cannot
;;;586    				be reached unless xNextExpireTime > xTimeNow, except in the
;;;587    				case when the current timer list is empty. */
;;;588    				if( xListWasEmpty != pdFALSE )
;;;589    				{
;;;590    					/* The current timer list is empty - is the overflow list
;;;591    					also empty? */
;;;592    					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
;;;593    				}
;;;594    
;;;595    				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
;;;596    
;;;597    				if( xTaskResumeAll() == pdFALSE )
;;;598    				{
;;;599    					/* Yield to wait for either a command to arrive, or the
;;;600    					block time to expire.  If a command arrived between the
;;;601    					critical section being exited and this yield then the yield
;;;602    					will not cause the task to block. */
;;;603    					portYIELD_WITHIN_API();
;;;604    				}
;;;605    				else
;;;606    				{
;;;607    					mtCOVERAGE_TEST_MARKER();
;;;608    				}
;;;609    			}
;;;610    		}
;;;611    		else
;;;612    		{
;;;613    			( void ) xTaskResumeAll();
000018  f7fffffe          BL       xTaskResumeAll
                  |L5.28|
;;;614    		}
;;;615    	}
;;;616    }
00001c  bdfe              POP      {r1-r7,pc}
                  |L5.30|
00001e  4e21              LDR      r6,|L5.164|
000020  2f00              CMP      r7,#0                 ;575
000022  d010              BEQ      |L5.70|
000024  6930              LDR      r0,[r6,#0x10]         ;592  ; pxOverflowTimerList
000026  6800              LDR      r0,[r0,#0]            ;592
000028  2800              CMP      r0,#0                 ;592
00002a  d038              BEQ      |L5.158|
00002c  2700              MOVS     r7,#0                 ;592
                  |L5.46|
00002e  1b29              SUBS     r1,r5,r4              ;595
000030  463a              MOV      r2,r7                 ;595
000032  6830              LDR      r0,[r6,#0]            ;595  ; xTimerQueue
000034  f7fffffe          BL       vQueueWaitForMessageRestricted
000038  f7fffffe          BL       xTaskResumeAll
00003c  2800              CMP      r0,#0                 ;597
00003e  d1ed              BNE      |L5.28|
000040  f7fffffe          BL       vPortYield
000044  bdfe              POP      {r1-r7,pc}
                  |L5.70|
000046  42a5              CMP      r5,r4                 ;575
000048  d8f1              BHI      |L5.46|
00004a  f7fffffe          BL       xTaskResumeAll
00004e  68f0              LDR      r0,[r6,#0xc]          ;577  ; pxCurrentTimerList
000050  4627              MOV      r7,r4                 ;578
000052  68c0              LDR      r0,[r0,#0xc]          ;578
000054  68c4              LDR      r4,[r0,#0xc]          ;578
000056  1d20              ADDS     r0,r4,#4              ;578
000058  f7fffffe          BL       uxListRemove
00005c  4621              MOV      r1,r4                 ;578
00005e  3120              ADDS     r1,r1,#0x20           ;578
000060  7a08              LDRB     r0,[r1,#8]            ;578
000062  0742              LSLS     r2,r0,#29             ;578
000064  d514              BPL      |L5.144|
000066  69a0              LDR      r0,[r4,#0x18]         ;578
000068  462b              MOV      r3,r5                 ;578
00006a  1941              ADDS     r1,r0,r5              ;578
00006c  463a              MOV      r2,r7                 ;578
00006e  4620              MOV      r0,r4                 ;578
000070  f7fffffe          BL       prvInsertTimerInActiveList
000074  2800              CMP      r0,#0                 ;578
000076  d00e              BEQ      |L5.150|
000078  2000              MOVS     r0,#0                 ;578
00007a  4603              MOV      r3,r0                 ;578
00007c  4601              MOV      r1,r0                 ;578
00007e  9000              STR      r0,[sp,#0]            ;578
000080  462a              MOV      r2,r5                 ;578
000082  4620              MOV      r0,r4                 ;578
000084  f7fffffe          BL       xTimerGenericCommand
000088  2800              CMP      r0,#0                 ;578
00008a  d104              BNE      |L5.150|
00008c  b672              CPSID    i                     ;578
                  |L5.142|
00008e  e7fe              B        |L5.142|
                  |L5.144|
000090  0840              LSRS     r0,r0,#1              ;578
000092  0040              LSLS     r0,r0,#1              ;578
000094  7208              STRB     r0,[r1,#8]            ;578
                  |L5.150|
000096  6a21              LDR      r1,[r4,#0x20]         ;578
000098  4620              MOV      r0,r4                 ;578
00009a  4788              BLX      r1                    ;578
00009c  bdfe              POP      {r1-r7,pc}
                  |L5.158|
00009e  2701              MOVS     r7,#1                 ;592
0000a0  e7c5              B        |L5.46|
;;;617    /*-----------------------------------------------------------*/
                          ENDP

0000a2  0000              DCW      0x0000
                  |L5.164|
                          DCD      ||.data||

                          AREA ||i.prvSampleTimeNow||, CODE, READONLY, ALIGN=2

                  prvSampleTimeNow PROC
;;;644    
;;;645    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
000000  b570              PUSH     {r4-r6,lr}
;;;646    {
000002  4605              MOV      r5,r0
;;;647    TickType_t xTimeNow;
;;;648    PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */
;;;649    
;;;650    	xTimeNow = xTaskGetTickCount();
000004  f7fffffe          BL       xTaskGetTickCount
;;;651    
;;;652    	if( xTimeNow < xLastTime )
000008  4e06              LDR      r6,|L6.36|
00000a  4604              MOV      r4,r0                 ;650
00000c  68b0              LDR      r0,[r6,#8]  ; xLastTime
00000e  4284              CMP      r4,r0
000010  d203              BCS      |L6.26|
;;;653    	{
;;;654    		prvSwitchTimerLists();
000012  f7fffffe          BL       prvSwitchTimerLists
;;;655    		*pxTimerListsWereSwitched = pdTRUE;
000016  2001              MOVS     r0,#1
000018  e000              B        |L6.28|
                  |L6.26|
;;;656    	}
;;;657    	else
;;;658    	{
;;;659    		*pxTimerListsWereSwitched = pdFALSE;
00001a  2000              MOVS     r0,#0
                  |L6.28|
;;;660    	}
;;;661    
;;;662    	xLastTime = xTimeNow;
00001c  6028              STR      r0,[r5,#0]
;;;663    
;;;664    	return xTimeNow;
00001e  4620              MOV      r0,r4
000020  60b4              STR      r4,[r6,#8]  ; xLastTime
;;;665    }
000022  bd70              POP      {r4-r6,pc}
;;;666    /*-----------------------------------------------------------*/
                          ENDP

                  |L6.36|
                          DCD      ||.data||

                          AREA ||i.prvSwitchTimerLists||, CODE, READONLY, ALIGN=2

                  prvSwitchTimerLists PROC
;;;856    
;;;857    static void prvSwitchTimerLists( void )
000000  b5f8              PUSH     {r3-r7,lr}
;;;858    {
;;;859    TickType_t xNextExpireTime, xReloadTime;
;;;860    List_t *pxTemp;
;;;861    Timer_t *pxTimer;
;;;862    BaseType_t xResult;
;;;863    
;;;864    	/* The tick count has overflowed.  The timer lists must be switched.
;;;865    	If there are any timers still referenced from the current timer list
;;;866    	then they must have expired and should be processed before the lists
;;;867    	are switched. */
;;;868    	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
;;;869    	{
;;;870    		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
000002  4e17              LDR      r6,|L7.96|
000004  e021              B        |L7.74|
                  |L7.6|
000006  68c0              LDR      r0,[r0,#0xc]
;;;871    
;;;872    		/* Remove the timer from the list. */
;;;873    		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
;;;874    		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
000008  68c4              LDR      r4,[r0,#0xc]
00000a  6805              LDR      r5,[r0,#0]
00000c  1d20              ADDS     r0,r4,#4
00000e  f7fffffe          BL       uxListRemove
;;;875    		traceTIMER_EXPIRED( pxTimer );
;;;876    
;;;877    		/* Execute its callback, then send a command to restart the timer if
;;;878    		it is an auto-reload timer.  It cannot be restarted here as the lists
;;;879    		have not yet been switched. */
;;;880    		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
000012  6a21              LDR      r1,[r4,#0x20]
000014  4620              MOV      r0,r4
000016  4788              BLX      r1
;;;881    
;;;882    		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
000018  2028              MOVS     r0,#0x28
00001a  5d00              LDRB     r0,[r0,r4]
00001c  0740              LSLS     r0,r0,#29
00001e  d514              BPL      |L7.74|
;;;883    		{
;;;884    			/* Calculate the reload value, and if the reload value results in
;;;885    			the timer going into the same timer list then it has already expired
;;;886    			and the timer should be re-inserted into the current list so it is
;;;887    			processed again within this loop.  Otherwise a command should be sent
;;;888    			to restart the timer to ensure it is only inserted into a list after
;;;889    			the lists have been swapped. */
;;;890    			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
000020  69a0              LDR      r0,[r4,#0x18]
000022  1940              ADDS     r0,r0,r5
;;;891    			if( xReloadTime > xNextExpireTime )
000024  42a8              CMP      r0,r5
000026  d906              BLS      |L7.54|
;;;892    			{
;;;893    				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
;;;894    				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
000028  6124              STR      r4,[r4,#0x10]
00002a  6060              STR      r0,[r4,#4]
;;;895    				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
00002c  1d21              ADDS     r1,r4,#4
00002e  68f0              LDR      r0,[r6,#0xc]  ; pxCurrentTimerList
000030  f7fffffe          BL       vListInsert
000034  e009              B        |L7.74|
                  |L7.54|
;;;896    			}
;;;897    			else
;;;898    			{
;;;899    				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
000036  2000              MOVS     r0,#0
000038  4603              MOV      r3,r0
00003a  4601              MOV      r1,r0
00003c  9000              STR      r0,[sp,#0]
00003e  462a              MOV      r2,r5
000040  4620              MOV      r0,r4
000042  f7fffffe          BL       xTimerGenericCommand
;;;900    				configASSERT( xResult );
000046  2800              CMP      r0,#0
000048  d007              BEQ      |L7.90|
                  |L7.74|
00004a  68f0              LDR      r0,[r6,#0xc]          ;868  ; pxCurrentTimerList
00004c  6801              LDR      r1,[r0,#0]            ;868
00004e  2900              CMP      r1,#0                 ;868
000050  d1d9              BNE      |L7.6|
;;;901    				( void ) xResult;
;;;902    			}
;;;903    		}
;;;904    		else
;;;905    		{
;;;906    			mtCOVERAGE_TEST_MARKER();
;;;907    		}
;;;908    	}
;;;909    
;;;910    	pxTemp = pxCurrentTimerList;
;;;911    	pxCurrentTimerList = pxOverflowTimerList;
000052  6931              LDR      r1,[r6,#0x10]  ; pxOverflowTimerList
;;;912    	pxOverflowTimerList = pxTemp;
000054  60f1              STR      r1,[r6,#0xc]  ; pxCurrentTimerList
000056  6130              STR      r0,[r6,#0x10]  ; pxOverflowTimerList
;;;913    }
000058  bdf8              POP      {r3-r7,pc}
                  |L7.90|
00005a  b672              CPSID    i                     ;900
                  |L7.92|
00005c  e7fe              B        |L7.92|
;;;914    /*-----------------------------------------------------------*/
                          ENDP

00005e  0000              DCW      0x0000
                  |L7.96|
                          DCD      ||.data||

                          AREA ||i.prvTimerTask||, CODE, READONLY, ALIGN=2

                  prvTimerTask PROC
;;;522    
;;;523    static portTASK_FUNCTION( prvTimerTask, pvParameters )
000000  4c09              LDR      r4,|L8.40|
                  |L8.2|
000002  68e0              LDR      r0,[r4,#0xc]  ; pxCurrentTimerList
000004  6801              LDR      r1,[r0,#0]
000006  2900              CMP      r1,#0
000008  d008              BEQ      |L8.28|
00000a  2100              MOVS     r1,#0
                  |L8.12|
00000c  2900              CMP      r1,#0
00000e  d007              BEQ      |L8.32|
000010  2000              MOVS     r0,#0
                  |L8.18|
;;;524    {
;;;525    TickType_t xNextExpireTime;
;;;526    BaseType_t xListWasEmpty;
;;;527    
;;;528    	/* Just to avoid compiler warnings. */
;;;529    	( void ) pvParameters;
;;;530    
;;;531    	#if( configUSE_DAEMON_TASK_STARTUP_HOOK == 1 )
;;;532    	{
;;;533    		extern void vApplicationDaemonTaskStartupHook( void );
;;;534    
;;;535    		/* Allow the application writer to execute some code in the context of
;;;536    		this task at the point the task starts executing.  This is useful if the
;;;537    		application includes initialisation code that would benefit from
;;;538    		executing after the scheduler has been started. */
;;;539    		vApplicationDaemonTaskStartupHook();
;;;540    	}
;;;541    	#endif /* configUSE_DAEMON_TASK_STARTUP_HOOK */
;;;542    
;;;543    	for( ;; )
;;;544    	{
;;;545    		/* Query the timers list to see if it contains any timers, and if so,
;;;546    		obtain the time at which the next timer will expire. */
;;;547    		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
;;;548    
;;;549    		/* If a timer has expired, process it.  Otherwise, block this task
;;;550    		until either a timer does expire, or a command is received. */
;;;551    		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
000012  f7fffffe          BL       prvProcessTimerOrBlockTask
;;;552    
;;;553    		/* Empty the command queue. */
;;;554    		prvProcessReceivedCommands();
000016  f7fffffe          BL       prvProcessReceivedCommands
00001a  e7f2              B        |L8.2|
                  |L8.28|
00001c  2101              MOVS     r1,#1
00001e  e7f5              B        |L8.12|
                  |L8.32|
000020  68c0              LDR      r0,[r0,#0xc]
000022  6800              LDR      r0,[r0,#0]
000024  e7f5              B        |L8.18|
;;;555    	}
;;;556    }
;;;557    /*-----------------------------------------------------------*/
                          ENDP

000026  0000              DCW      0x0000
                  |L8.40|
                          DCD      ||.data||

                          AREA ||i.pvTimerGetTimerID||, CODE, READONLY, ALIGN=1

                  pvTimerGetTimerID PROC
;;;991    
;;;992    void *pvTimerGetTimerID( const TimerHandle_t xTimer )
000000  b510              PUSH     {r4,lr}
;;;993    {
;;;994    Timer_t * const pxTimer = xTimer;
000002  0004              MOVS     r4,r0
000004  d006              BEQ      |L9.20|
;;;995    void *pvReturn;
;;;996    
;;;997    	configASSERT( xTimer );
;;;998    
;;;999    	taskENTER_CRITICAL();
000006  f7fffffe          BL       vPortEnterCritical
;;;1000   	{
;;;1001   		pvReturn = pxTimer->pvTimerID;
00000a  69e4              LDR      r4,[r4,#0x1c]
;;;1002   	}
;;;1003   	taskEXIT_CRITICAL();
00000c  f7fffffe          BL       vPortExitCritical
;;;1004   
;;;1005   	return pvReturn;
000010  4620              MOV      r0,r4
;;;1006   }
000012  bd10              POP      {r4,pc}
                  |L9.20|
000014  b672              CPSID    i                     ;997
                  |L9.22|
000016  e7fe              B        |L9.22|
;;;1007   /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.uxTimerGetTimerNumber||, CODE, READONLY, ALIGN=1

                  uxTimerGetTimerNumber PROC
;;;1077   
;;;1078   	UBaseType_t uxTimerGetTimerNumber( TimerHandle_t xTimer )
000000  6a40              LDR      r0,[r0,#0x24]
;;;1079   	{
;;;1080   		return ( ( Timer_t * ) xTimer )->uxTimerNumber;
;;;1081   	}
000002  4770              BX       lr
;;;1082   
                          ENDP


                          AREA ||i.vTimerSetReloadMode||, CODE, READONLY, ALIGN=1

                  vTimerSetReloadMode PROC
;;;441    
;;;442    void vTimerSetReloadMode( TimerHandle_t xTimer, const UBaseType_t uxAutoReload )
000000  b570              PUSH     {r4-r6,lr}
;;;443    {
000002  460d              MOV      r5,r1
000004  0004              MOVS     r4,r0
000006  d008              BEQ      |L11.26|
;;;444    Timer_t * pxTimer =  xTimer;
;;;445    
;;;446    	configASSERT( xTimer );
;;;447    	taskENTER_CRITICAL();
000008  f7fffffe          BL       vPortEnterCritical
00000c  3420              ADDS     r4,r4,#0x20
;;;448    	{
;;;449    		if( uxAutoReload != pdFALSE )
;;;450    		{
;;;451    			pxTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
;;;452    		}
;;;453    		else
;;;454    		{
;;;455    			pxTimer->ucStatus &= ~tmrSTATUS_IS_AUTORELOAD;
00000e  7a20              LDRB     r0,[r4,#8]
000010  2d00              CMP      r5,#0                 ;449
000012  d004              BEQ      |L11.30|
000014  2104              MOVS     r1,#4                 ;451
000016  4308              ORRS     r0,r0,r1              ;451
000018  e003              B        |L11.34|
                  |L11.26|
00001a  b672              CPSID    i                     ;446
                  |L11.28|
00001c  e7fe              B        |L11.28|
                  |L11.30|
00001e  21fb              MOVS     r1,#0xfb
000020  4008              ANDS     r0,r0,r1
                  |L11.34|
000022  7220              STRB     r0,[r4,#8]
;;;456    		}
;;;457    	}
;;;458    	taskEXIT_CRITICAL();
000024  f7fffffe          BL       vPortExitCritical
;;;459    }
000028  bd70              POP      {r4-r6,pc}
;;;460    /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.vTimerSetTimerID||, CODE, READONLY, ALIGN=1

                  vTimerSetTimerID PROC
;;;1008   
;;;1009   void vTimerSetTimerID( TimerHandle_t xTimer, void *pvNewID )
000000  b570              PUSH     {r4-r6,lr}
;;;1010   {
000002  460d              MOV      r5,r1
;;;1011   Timer_t * const pxTimer = xTimer;
000004  0004              MOVS     r4,r0
000006  d005              BEQ      |L12.20|
;;;1012   
;;;1013   	configASSERT( xTimer );
;;;1014   
;;;1015   	taskENTER_CRITICAL();
000008  f7fffffe          BL       vPortEnterCritical
;;;1016   	{
;;;1017   		pxTimer->pvTimerID = pvNewID;
;;;1018   	}
;;;1019   	taskEXIT_CRITICAL();
00000c  61e5              STR      r5,[r4,#0x1c]
00000e  f7fffffe          BL       vPortExitCritical
;;;1020   }
000012  bd70              POP      {r4-r6,pc}
                  |L12.20|
000014  b672              CPSID    i                     ;1013
                  |L12.22|
000016  e7fe              B        |L12.22|
;;;1021   /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.vTimerSetTimerNumber||, CODE, READONLY, ALIGN=1

                  vTimerSetTimerNumber PROC
;;;1087   
;;;1088   	void vTimerSetTimerNumber( TimerHandle_t xTimer, UBaseType_t uxTimerNumber )
000000  6241              STR      r1,[r0,#0x24]
;;;1089   	{
;;;1090   		( ( Timer_t * ) xTimer )->uxTimerNumber = uxTimerNumber;
;;;1091   	}
000002  4770              BX       lr
;;;1092   
                          ENDP


                          AREA ||i.xTimerCreate||, CODE, READONLY, ALIGN=1

                  xTimerCreate PROC
;;;281    
;;;282    	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
000000  b5ff              PUSH     {r0-r7,lr}
;;;283    								const TickType_t xTimerPeriodInTicks,
;;;284    								const UBaseType_t uxAutoReload,
;;;285    								void * const pvTimerID,
;;;286    								TimerCallbackFunction_t pxCallbackFunction )
;;;287    	{
000002  4607              MOV      r7,r0
000004  b083              SUB      sp,sp,#0xc
000006  460d              MOV      r5,r1
;;;288    	Timer_t *pxNewTimer;
;;;289    
;;;290    		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
000008  202c              MOVS     r0,#0x2c
00000a  f7fffffe          BL       pvPortMalloc
00000e  0004              MOVS     r4,r0
;;;291    
;;;292    		if( pxNewTimer != NULL )
000010  d01d              BEQ      |L14.78|
;;;293    		{
;;;294    			/* Status is thus far zero as the timer is not created statically
;;;295    			and has not been started.  The autoreload bit may get set in
;;;296    			prvInitialiseNewTimer. */
;;;297    			pxNewTimer->ucStatus = 0x00;
000012  4626              MOV      r6,r4
000014  2000              MOVS     r0,#0
000016  3620              ADDS     r6,r6,#0x20
000018  7230              STRB     r0,[r6,#8]
;;;298    			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
00001a  9805              LDR      r0,[sp,#0x14]
00001c  9702              STR      r7,[sp,#8]
00001e  9001              STR      r0,[sp,#4]
000020  9f06              LDR      r7,[sp,#0x18]
000022  980c              LDR      r0,[sp,#0x30]
000024  9000              STR      r0,[sp,#0]
000026  2d00              CMP      r5,#0
000028  d014              BEQ      |L14.84|
00002a  f7fffffe          BL       prvCheckForValidListAndQueue
00002e  9802              LDR      r0,[sp,#8]
000030  61e7              STR      r7,[r4,#0x1c]
000032  61a5              STR      r5,[r4,#0x18]
000034  6020              STR      r0,[r4,#0]
000036  9800              LDR      r0,[sp,#0]
000038  6220              STR      r0,[r4,#0x20]
00003a  1d20              ADDS     r0,r4,#4
00003c  f7fffffe          BL       vListInitialiseItem
000040  9801              LDR      r0,[sp,#4]
000042  2800              CMP      r0,#0
000044  d003              BEQ      |L14.78|
000046  7a30              LDRB     r0,[r6,#8]
000048  2104              MOVS     r1,#4
00004a  4308              ORRS     r0,r0,r1
00004c  7230              STRB     r0,[r6,#8]
                  |L14.78|
;;;299    		}
;;;300    
;;;301    		return pxNewTimer;
00004e  4620              MOV      r0,r4
;;;302    	}
000050  b007              ADD      sp,sp,#0x1c
000052  bdf0              POP      {r4-r7,pc}
                  |L14.84|
000054  b672              CPSID    i
                  |L14.86|
000056  e7fe              B        |L14.86|
;;;303    
                          ENDP


                          AREA ||i.xTimerCreateTimerTask||, CODE, READONLY, ALIGN=2

                  xTimerCreateTimerTask PROC
;;;226    
;;;227    BaseType_t xTimerCreateTimerTask( void )
000000  b51c              PUSH     {r2-r4,lr}
;;;228    {
;;;229    BaseType_t xReturn = pdFAIL;
;;;230    
;;;231    	/* This function is called when the scheduler is started if
;;;232    	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
;;;233    	timer service task has been created/initialised.  If timers have already
;;;234    	been created then the initialisation will already have been performed. */
;;;235    	prvCheckForValidListAndQueue();
000002  f7fffffe          BL       prvCheckForValidListAndQueue
;;;236    
;;;237    	if( xTimerQueue != NULL )
000006  480a              LDR      r0,|L15.48|
000008  6800              LDR      r0,[r0,#0]  ; xTimerQueue
00000a  2800              CMP      r0,#0
00000c  d00c              BEQ      |L15.40|
;;;238    	{
;;;239    		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
;;;240    		{
;;;241    			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
;;;242    			StackType_t *pxTimerTaskStackBuffer = NULL;
;;;243    			uint32_t ulTimerTaskStackSize;
;;;244    
;;;245    			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
;;;246    			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
;;;247    													configTIMER_SERVICE_TASK_NAME,
;;;248    													ulTimerTaskStackSize,
;;;249    													NULL,
;;;250    													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
;;;251    													pxTimerTaskStackBuffer,
;;;252    													pxTimerTaskTCBBuffer );
;;;253    
;;;254    			if( xTimerTaskHandle != NULL )
;;;255    			{
;;;256    				xReturn = pdPASS;
;;;257    			}
;;;258    		}
;;;259    		#else
;;;260    		{
;;;261    			xReturn = xTaskCreate(	prvTimerTask,
00000e  4908              LDR      r1,|L15.48|
000010  2002              MOVS     r0,#2
000012  1d09              ADDS     r1,r1,#4
000014  01c2              LSLS     r2,r0,#7
000016  9101              STR      r1,[sp,#4]
000018  9000              STR      r0,[sp,#0]
00001a  2300              MOVS     r3,#0
00001c  a105              ADR      r1,|L15.52|
00001e  4807              LDR      r0,|L15.60|
000020  f7fffffe          BL       xTaskCreate
;;;262    									configTIMER_SERVICE_TASK_NAME,
;;;263    									configTIMER_TASK_STACK_DEPTH,
;;;264    									NULL,
;;;265    									( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
;;;266    									&xTimerTaskHandle );
;;;267    		}
;;;268    		#endif /* configSUPPORT_STATIC_ALLOCATION */
;;;269    	}
;;;270    	else
;;;271    	{
;;;272    		mtCOVERAGE_TEST_MARKER();
;;;273    	}
;;;274    
;;;275    	configASSERT( xReturn );
000024  2800              CMP      r0,#0
000026  d101              BNE      |L15.44|
                  |L15.40|
000028  b672              CPSID    i
                  |L15.42|
00002a  e7fe              B        |L15.42|
                  |L15.44|
;;;276    	return xReturn;
;;;277    }
00002c  bd1c              POP      {r2-r4,pc}
;;;278    /*-----------------------------------------------------------*/
                          ENDP

00002e  0000              DCW      0x0000
                  |L15.48|
                          DCD      ||.data||
                  |L15.52|
000034  546d7220          DCB      "Tmr Svc",0
000038  53766300
                  |L15.60|
                          DCD      prvTimerTask

                          AREA ||i.xTimerGenericCommand||, CODE, READONLY, ALIGN=2

                  xTimerGenericCommand PROC
;;;380    
;;;381    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
000000  b5fe              PUSH     {r1-r7,lr}
;;;382    {
000002  461d              MOV      r5,r3
000004  4603              MOV      r3,r0
;;;383    BaseType_t xReturn = pdFAIL;
000006  2000              MOVS     r0,#0
;;;384    DaemonTaskMessage_t xMessage;
;;;385    
;;;386    	configASSERT( xTimer );
000008  9e08              LDR      r6,[sp,#0x20]
00000a  2b00              CMP      r3,#0
00000c  d012              BEQ      |L16.52|
;;;387    
;;;388    	/* Send a message to the timer service task to perform a particular action
;;;389    	on a particular timer definition. */
;;;390    	if( xTimerQueue != NULL )
00000e  4c0f              LDR      r4,|L16.76|
000010  6827              LDR      r7,[r4,#0]  ; xTimerQueue
000012  2f00              CMP      r7,#0
000014  d00d              BEQ      |L16.50|
000016  4668              MOV      r0,sp
000018  c00e              STM      r0!,{r1-r3}
;;;391    	{
;;;392    		/* Send a command to the timer service task to start the xTimer timer. */
;;;393    		xMessage.xMessageID = xCommandID;
;;;394    		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
;;;395    		xMessage.u.xTimerParameters.pxTimer = xTimer;
;;;396    
;;;397    		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
00001a  2906              CMP      r1,#6
00001c  da0f              BGE      |L16.62|
;;;398    		{
;;;399    			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
00001e  f7fffffe          BL       xTaskGetSchedulerState
000022  2802              CMP      r0,#2
000024  d008              BEQ      |L16.56|
;;;400    			{
;;;401    				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
;;;402    			}
;;;403    			else
;;;404    			{
;;;405    				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
000026  2300              MOVS     r3,#0
000028  461a              MOV      r2,r3
                  |L16.42|
00002a  4669              MOV      r1,sp                 ;401
00002c  6820              LDR      r0,[r4,#0]            ;401  ; xTimerQueue
00002e  f7fffffe          BL       xQueueGenericSend
                  |L16.50|
;;;406    			}
;;;407    		}
;;;408    		else
;;;409    		{
;;;410    			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
;;;411    		}
;;;412    
;;;413    		traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
;;;414    	}
;;;415    	else
;;;416    	{
;;;417    		mtCOVERAGE_TEST_MARKER();
;;;418    	}
;;;419    
;;;420    	return xReturn;
;;;421    }
000032  bdfe              POP      {r1-r7,pc}
                  |L16.52|
000034  b672              CPSID    i                     ;386
                  |L16.54|
000036  e7fe              B        |L16.54|
                  |L16.56|
000038  2300              MOVS     r3,#0                 ;401
00003a  4632              MOV      r2,r6                 ;401
00003c  e7f5              B        |L16.42|
                  |L16.62|
00003e  2300              MOVS     r3,#0                 ;410
000040  462a              MOV      r2,r5                 ;410
000042  4669              MOV      r1,sp                 ;410
000044  4638              MOV      r0,r7                 ;410
000046  f7fffffe          BL       xQueueGenericSendFromISR
00004a  bdfe              POP      {r1-r7,pc}
;;;422    /*-----------------------------------------------------------*/
                          ENDP

                  |L16.76|
                          DCD      ||.data||

                          AREA ||i.xTimerGetExpiryTime||, CODE, READONLY, ALIGN=1

                  xTimerGetExpiryTime PROC
;;;461    
;;;462    TickType_t xTimerGetExpiryTime( TimerHandle_t xTimer )
000000  2800              CMP      r0,#0
;;;463    {
000002  d001              BEQ      |L17.8|
;;;464    Timer_t * pxTimer =  xTimer;
;;;465    TickType_t xReturn;
;;;466    
;;;467    	configASSERT( xTimer );
;;;468    	xReturn = listGET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ) );
000004  6840              LDR      r0,[r0,#4]
;;;469    	return xReturn;
;;;470    }
000006  4770              BX       lr
                  |L17.8|
000008  b672              CPSID    i                     ;467
                  |L17.10|
00000a  e7fe              B        |L17.10|
;;;471    /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.xTimerGetPeriod||, CODE, READONLY, ALIGN=1

                  xTimerGetPeriod PROC
;;;432    
;;;433    TickType_t xTimerGetPeriod( TimerHandle_t xTimer )
000000  2800              CMP      r0,#0
;;;434    {
000002  d001              BEQ      |L18.8|
;;;435    Timer_t *pxTimer = xTimer;
;;;436    
;;;437    	configASSERT( xTimer );
;;;438    	return pxTimer->xTimerPeriodInTicks;
000004  6980              LDR      r0,[r0,#0x18]
;;;439    }
000006  4770              BX       lr
                  |L18.8|
000008  b672              CPSID    i                     ;437
                  |L18.10|
00000a  e7fe              B        |L18.10|
;;;440    /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.xTimerGetTimerDaemonTaskHandle||, CODE, READONLY, ALIGN=2

                  xTimerGetTimerDaemonTaskHandle PROC
;;;423    
;;;424    TaskHandle_t xTimerGetTimerDaemonTaskHandle( void )
000000  4803              LDR      r0,|L19.16|
;;;425    {
;;;426    	/* If xTimerGetTimerDaemonTaskHandle() is called before the scheduler has been
;;;427    	started, then xTimerTaskHandle will be NULL. */
;;;428    	configASSERT( ( xTimerTaskHandle != NULL ) );
000002  6840              LDR      r0,[r0,#4]  ; xTimerTaskHandle
000004  2800              CMP      r0,#0
000006  d101              BNE      |L19.12|
000008  b672              CPSID    i
                  |L19.10|
00000a  e7fe              B        |L19.10|
                  |L19.12|
;;;429    	return xTimerTaskHandle;
;;;430    }
00000c  4770              BX       lr
;;;431    /*-----------------------------------------------------------*/
                          ENDP

00000e  0000              DCW      0x0000
                  |L19.16|
                          DCD      ||.data||

                          AREA ||i.xTimerIsTimerActive||, CODE, READONLY, ALIGN=1

                  xTimerIsTimerActive PROC
;;;966    
;;;967    BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
000000  b510              PUSH     {r4,lr}
;;;968    {
;;;969    BaseType_t xReturn;
;;;970    Timer_t *pxTimer = xTimer;
000002  0004              MOVS     r4,r0
000004  d00a              BEQ      |L20.28|
;;;971    
;;;972    	configASSERT( xTimer );
;;;973    
;;;974    	/* Is the timer in the list of active timers? */
;;;975    	taskENTER_CRITICAL();
000006  f7fffffe          BL       vPortEnterCritical
00000a  3420              ADDS     r4,r4,#0x20
;;;976    	{
;;;977    		if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0 )
00000c  7a20              LDRB     r0,[r4,#8]
00000e  07c0              LSLS     r0,r0,#31
000010  d006              BEQ      |L20.32|
;;;978    		{
;;;979    			xReturn = pdFALSE;
;;;980    		}
;;;981    		else
;;;982    		{
;;;983    			xReturn = pdTRUE;
000012  2401              MOVS     r4,#1
                  |L20.20|
;;;984    		}
;;;985    	}
;;;986    	taskEXIT_CRITICAL();
000014  f7fffffe          BL       vPortExitCritical
;;;987    
;;;988    	return xReturn;
000018  4620              MOV      r0,r4
;;;989    } /*lint !e818 Can't be pointer to const due to the typedef. */
00001a  bd10              POP      {r4,pc}
                  |L20.28|
00001c  b672              CPSID    i                     ;972
                  |L20.30|
00001e  e7fe              B        |L20.30|
                  |L20.32|
000020  2400              MOVS     r4,#0                 ;979
000022  e7f7              B        |L20.20|
;;;990    /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  xActiveTimerList1
                          %        20
                  xActiveTimerList2
                          %        20

                          AREA ||.data||, DATA, ALIGN=2

                  xTimerQueue
                          DCD      0x00000000
                  xTimerTaskHandle
                          DCD      0x00000000
                  xLastTime
                          DCD      0x00000000
                  pxCurrentTimerList
                          DCD      0x00000000
                  pxOverflowTimerList
                          DCD      0x00000000

                          AREA ||i.__ARM_common_switch8||, COMGROUP=__ARM_common_switch8, CODE, READONLY, ALIGN=1

                  __ARM_common_switch8 PROC
000000  b430              PUSH     {r4,r5}
000002  4674              MOV      r4,lr
000004  1e64              SUBS     r4,r4,#1
000006  7825              LDRB     r5,[r4,#0]
000008  1c64              ADDS     r4,r4,#1
00000a  42ab              CMP      r3,r5
00000c  d200              BCS      |L123.16|
00000e  461d              MOV      r5,r3
                  |L123.16|
000010  5d63              LDRB     r3,[r4,r5]
000012  005b              LSLS     r3,r3,#1
000014  18e3              ADDS     r3,r4,r3
000016  bc30              POP      {r4,r5}
000018  4718              BX       r3
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\..\\ThirdParty\\FreeRTOS\\Source\\timers.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___8_timers_c_a20bbafd____REV16|
#line 388 "..\\..\\..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___8_timers_c_a20bbafd____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___8_timers_c_a20bbafd____REVSH|
#line 402
|__asm___8_timers_c_a20bbafd____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
